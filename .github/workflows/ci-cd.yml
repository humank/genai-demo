# GenAI Demo CI/CD Pipeline
# Comprehensive CI workflow with unit, integration, BDD, and architecture tests
# Multi-architecture Docker builds for ARM64 Graviton3 optimization
# Security scanning and automated ECR deployment

name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '*.md'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  # AWS Configuration
  AWS_REGION: ap-northeast-1
  AWS_REGION_DR: ap-east-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com
  ECR_REPOSITORY_BACKEND: genai-demo/backend
  ECR_REPOSITORY_CMC_FRONTEND: genai-demo/cmc-frontend
  ECR_REPOSITORY_CONSUMER_FRONTEND: genai-demo/consumer-frontend
  
  # Build Configuration
  JAVA_VERSION: '21'
  NODE_VERSION: '18'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.configureondemand=true'
  
  # Security and Quality Gates
  SECURITY_SCAN_ENABLED: true
  QUALITY_GATE_COVERAGE_THRESHOLD: 80
  VULNERABILITY_SEVERITY_THRESHOLD: 'HIGH'

jobs:
  # Job 1: Code Quality and Security Analysis
  code-analysis:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      cmc-frontend-changed: ${{ steps.changes.outputs.cmc-frontend }}
      consumer-frontend-changed: ${{ steps.changes.outputs.consumer-frontend }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'app/**'
              - 'build.gradle'
              - 'settings.gradle'
              - 'gradle.properties'
              - 'Dockerfile'
            cmc-frontend:
              - 'cmc-frontend/**'
            consumer-frontend:
              - 'consumer-frontend/**'
            infrastructure:
              - 'infrastructure/**'
              - 'deployment/**'
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        if: steps.changes.outputs.backend == 'true'
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: steps.changes.outputs.cmc-frontend == 'true' || steps.changes.outputs.consumer-frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            cmc-frontend/package-lock.json
            consumer-frontend/package-lock.json
      
      - name: Run dependency vulnerability scan
        if: env.SECURITY_SCAN_ENABLED == 'true'
        run: |
          # Backend dependency scan
          if [[ "${{ steps.changes.outputs.backend }}" == "true" ]]; then
            ./gradlew dependencyCheckAnalyze || echo "Backend dependency scan completed with warnings"
          fi
          
          # Frontend dependency scans
          if [[ "${{ steps.changes.outputs.cmc-frontend }}" == "true" ]]; then
            cd cmc-frontend && npm audit --audit-level=high || echo "CMC Frontend audit completed with warnings"
          fi
          
          if [[ "${{ steps.changes.outputs.consumer-frontend }}" == "true" ]]; then
            cd consumer-frontend && npm audit --audit-level=high || echo "Consumer Frontend audit completed with warnings"
          fi
      
      - name: Upload dependency scan results
        if: env.SECURITY_SCAN_ENABLED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            build/reports/
            cmc-frontend/npm-audit.json
            consumer-frontend/npm-audit.json
          retention-days: 30

  # Job 2: Backend Testing Suite
  backend-tests:
    name: Backend Tests (Unit, Integration, BDD, Architecture)
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.backend-changed == 'true'
    
    strategy:
      matrix:
        test-suite: [unit, integration, bdd, architecture]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: gradle
      
      - name: Configure test environment
        run: |
          # Optimize JVM for CI environment
          echo "JAVA_TOOL_OPTIONS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC" >> $GITHUB_ENV
          
          # Set test-specific system properties
          echo "GRADLE_OPTS=$GRADLE_OPTS -Dspring.profiles.active=test" >> $GITHUB_ENV
      
      - name: Run Unit Tests
        if: matrix.test-suite == 'unit'
        run: |
          ./gradlew test --continue --build-cache --parallel
          echo "UNIT_TEST_RESULTS=$(find . -name 'TEST-*.xml' | wc -l)" >> $GITHUB_ENV
      
      - name: Run Integration Tests
        if: matrix.test-suite == 'integration'
        run: |
          ./gradlew integrationTest --continue --build-cache
          echo "INTEGRATION_TEST_RESULTS=$(find . -name 'TEST-*.xml' | wc -l)" >> $GITHUB_ENV
      
      - name: Run BDD Tests (Cucumber)
        if: matrix.test-suite == 'bdd'
        run: |
          ./gradlew cucumber --continue --build-cache
          echo "BDD_TEST_RESULTS=$(find . -name 'cucumber-report.json' | wc -l)" >> $GITHUB_ENV
      
      - name: Run Architecture Tests (ArchUnit)
        if: matrix.test-suite == 'architecture'
        run: |
          ./gradlew testArchitecture --continue --build-cache
          echo "ARCH_TEST_RESULTS=$(find . -name 'TEST-*.xml' | wc -l)" >> $GITHUB_ENV
      
      - name: Generate Test Reports
        if: always()
        run: |
          ./gradlew prepareAllureResults --continue
          
          # Generate coverage report
          ./gradlew jacocoTestReport --continue
      
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-${{ matrix.test-suite }}
          path: |
            app/build/reports/
            app/build/test-results/
            app/build/allure-results/
          retention-days: 30
      
      - name: Publish Test Results
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Backend Tests (${{ matrix.test-suite }})
          path: 'app/build/test-results/**/*.xml'
          reporter: java-junit
          fail-on-error: false

  # Job 3: Frontend Testing Suite
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.cmc-frontend-changed == 'true' || needs.code-analysis.outputs.consumer-frontend-changed == 'true'
    
    strategy:
      matrix:
        app: [cmc-frontend, consumer-frontend]
        include:
          - app: cmc-frontend
            test-command: 'npm run test:ci'
            build-command: 'npm run build'
          - app: consumer-frontend
            test-command: 'npm run test:ci'
            build-command: 'npm run build'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.app }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.app }}
        run: npm ci
      
      - name: Run linting
        working-directory: ${{ matrix.app }}
        run: npm run lint || echo "Linting completed with warnings"
      
      - name: Run tests
        working-directory: ${{ matrix.app }}
        run: ${{ matrix.test-command }}
      
      - name: Build application
        working-directory: ${{ matrix.app }}
        run: ${{ matrix.build-command }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-test-results
          path: |
            ${{ matrix.app }}/coverage/
            ${{ matrix.app }}/test-results/
          retention-days: 30

  # Job 4: Infrastructure Tests
  infrastructure-tests:
    name: Infrastructure Tests (CDK)
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.infrastructure-changed == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json
      
      - name: Install CDK dependencies
        working-directory: infrastructure
        run: npm ci
      
      - name: Run CDK unit tests
        working-directory: infrastructure
        run: npm run test:unit
      
      - name: Run CDK integration tests
        working-directory: infrastructure
        run: npm run test:integration
      
      - name: Run CDK snapshot tests
        working-directory: infrastructure
        run: npm run test:snapshot
      
      - name: Run CDK compliance tests
        working-directory: infrastructure
        run: npm run test:compliance
      
      - name: CDK Synthesis Validation
        working-directory: infrastructure
        run: |
          npm run synth:validate
          npm run validate:templates
      
      - name: Upload infrastructure test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: infrastructure-test-results
          path: |
            infrastructure/coverage/
            infrastructure/test-results/
            infrastructure/cdk.out/
          retention-days: 30

  # Job 5: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [code-analysis]
    if: env.SECURITY_SCAN_ENABLED == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.VULNERABILITY_SEVERITY_THRESHOLD }}
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: java, javascript
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            codeql-results/
          retention-days: 30

  # Job 6: Build and Push Docker Images
  build-and-push:
    name: Build & Push Multi-Architecture Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, infrastructure-tests, security-scan]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped') && (needs.infrastructure-tests.result == 'success' || needs.infrastructure-tests.result == 'skipped')
    
    strategy:
      matrix:
        component: [backend, cmc-frontend, consumer-frontend]
        include:
          - component: backend
            dockerfile: Dockerfile
            context: .
            ecr-repo: ${{ env.ECR_REPOSITORY_BACKEND }}
          - component: cmc-frontend
            dockerfile: cmc-frontend/Dockerfile
            context: cmc-frontend
            ecr-repo: ${{ env.ECR_REPOSITORY_CMC_FRONTEND }}
          - component: consumer-frontend
            dockerfile: consumer-frontend/Dockerfile
            context: consumer-frontend
            ecr-repo: ${{ env.ECR_REPOSITORY_CONSUMER_FRONTEND }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ matrix.ecr-repo }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.ECR_REGISTRY }}/${{ matrix.ecr-repo }}:${{ github.sha }}
          format: 'sarif'
          output: 'container-scan-${{ matrix.component }}.sarif'
      
      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-${{ matrix.component }}
          path: container-scan-${{ matrix.component }}.sarif
          retention-days: 30

  # Job 7: Quality Gates and Reporting
  quality-gates:
    name: Quality Gates & Reporting
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, infrastructure-tests, security-scan, build-and-push]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v5
        with:
          path: test-results/
      
      - name: Evaluate Quality Gates
        id: quality-gates
        run: |
          # Initialize quality gate status
          QUALITY_GATE_PASSED=true
          
          # Check test coverage (placeholder - would integrate with actual coverage tools)
          echo "Checking test coverage threshold: ${{ env.QUALITY_GATE_COVERAGE_THRESHOLD }}%"
          
          # Check security scan results
          if [[ -f "test-results/security-scan-results/trivy-results.sarif" ]]; then
            HIGH_VULNS=$(jq '.runs[0].results | length' test-results/security-scan-results/trivy-results.sarif 2>/dev/null || echo "0")
            if [[ $HIGH_VULNS -gt 0 ]]; then
              echo "❌ Security gate failed: $HIGH_VULNS high/critical vulnerabilities found"
              QUALITY_GATE_PASSED=false
            else
              echo "✅ Security gate passed: No high/critical vulnerabilities"
            fi
          fi
          
          # Check test results
          FAILED_TESTS=$(find test-results/ -name "*.xml" -exec grep -l 'failures="[1-9]' {} \; | wc -l)
          if [[ $FAILED_TESTS -gt 0 ]]; then
            echo "❌ Test gate failed: $FAILED_TESTS test suites have failures"
            QUALITY_GATE_PASSED=false
          else
            echo "✅ Test gate passed: All tests successful"
          fi
          
          echo "quality-gate-passed=$QUALITY_GATE_PASSED" >> $GITHUB_OUTPUT
      
      - name: Generate comprehensive report
        run: |
          cat > quality-report.md << 'EOF'
          # CI/CD Pipeline Quality Report
          
          ## 📊 Pipeline Summary
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Triggered by**: ${{ github.event_name }}
          - **Quality Gate**: ${{ steps.quality-gates.outputs.quality-gate-passed == 'true' && '✅ PASSED' || '❌ FAILED' }}
          
          ## 🧪 Test Results
          - Backend Tests: ${{ needs.backend-tests.result }}
          - Frontend Tests: ${{ needs.frontend-tests.result }}
          - Infrastructure Tests: ${{ needs.infrastructure-tests.result }}
          
          ## 🔒 Security Scan
          - Dependency Scan: ${{ needs.security-scan.result }}
          - Container Scan: Completed
          - CodeQL Analysis: ${{ needs.security-scan.result }}
          
          ## 🐳 Docker Images
          - Backend Image: Built and pushed
          - CMC Frontend Image: Built and pushed
          - Consumer Frontend Image: Built and pushed
          
          ## 📈 Quality Metrics
          - Test Coverage: Target ${{ env.QUALITY_GATE_COVERAGE_THRESHOLD }}%
          - Security Threshold: ${{ env.VULNERABILITY_SEVERITY_THRESHOLD }}
          
          EOF
      
      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md
          retention-days: 90
      
      - name: Comment PR with quality report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
      
      - name: Fail pipeline if quality gates not met
        if: steps.quality-gates.outputs.quality-gate-passed != 'true'
        run: |
          echo "❌ Quality gates failed. Pipeline terminated."
          exit 1

  # Job 8: GitOps Deployment with ArgoCD
  gitops-deployment:
    name: GitOps Deployment with ArgoCD
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/main' && needs.quality-gates.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Update Rollout manifests with new image tags
        run: |
          # Update image tags in Rollout manifests
          IMAGE_TAG="${{ github.sha }}"
          
          # Update backend rollout
          if [[ -f "infrastructure/k8s/rollouts/backend-blue-green.yaml" ]]; then
            sed -i "s|image: .*genai-demo/backend:.*|image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${IMAGE_TAG}|g" infrastructure/k8s/rollouts/backend-blue-green.yaml
            echo "Updated backend rollout with image tag: ${IMAGE_TAG}"
          fi
          
          # Update CMC frontend rollout
          if [[ -f "infrastructure/k8s/rollouts/cmc-frontend-canary.yaml" ]]; then
            sed -i "s|image: .*genai-demo/cmc-frontend:.*|image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CMC_FRONTEND }}:${IMAGE_TAG}|g" infrastructure/k8s/rollouts/cmc-frontend-canary.yaml
            echo "Updated CMC frontend rollout with image tag: ${IMAGE_TAG}"
          fi
          
          # Update consumer frontend rollout
          if [[ -f "infrastructure/k8s/rollouts/consumer-frontend-canary.yaml" ]]; then
            sed -i "s|image: .*genai-demo/consumer-frontend:.*|image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CONSUMER_FRONTEND }}:${IMAGE_TAG}|g" infrastructure/k8s/rollouts/consumer-frontend-canary.yaml
            echo "Updated consumer frontend rollout with image tag: ${IMAGE_TAG}"
          fi
          
          # Update ArgoCD application image tags
          find infrastructure/k8s/gitops/applications/ -name "*.yaml" -exec sed -i "s|newTag: .*|newTag: ${IMAGE_TAG}|g" {} \;
          echo "Updated ArgoCD application manifests with image tag: ${IMAGE_TAG}"
      
      - name: Validate Kubernetes manifests
        run: |
          # Install kubeval for manifest validation
          curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
          sudo mv kubeval /usr/local/bin
          
          # Validate rollout manifests
          echo "Validating Kubernetes manifests..."
          find infrastructure/k8s/rollouts/ -name "*.yaml" -exec kubeval {} \;
          find infrastructure/k8s/gitops/ -name "*.yaml" -exec kubeval {} \;
          
          echo "✅ All Kubernetes manifests are valid"
      
      - name: Commit and push updated manifests
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Check if there are changes to commit
          if [[ -n "$(git status --porcelain)" ]]; then
            git add infrastructure/k8s/rollouts/
            git add infrastructure/k8s/gitops/applications/
            git commit -m "chore(gitops): update image tags to ${{ github.sha }}
            
            - Backend: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}
            - CMC Frontend: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CMC_FRONTEND }}:${{ github.sha }}
            - Consumer Frontend: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CONSUMER_FRONTEND }}:${{ github.sha }}
            
            Automated update by GitHub Actions CI/CD pipeline"
            
            git push
            echo "✅ Updated manifests committed and pushed"
          else
            echo "ℹ️ No changes to commit"
          fi
      
      - name: Trigger ArgoCD sync (if ArgoCD CLI is available)
        continue-on-error: true
        run: |
          # This step will only work if ArgoCD is accessible and configured
          # In a real environment, you would configure ArgoCD CLI with proper authentication
          
          echo "🔄 ArgoCD will automatically detect the changes and sync applications"
          echo "Monitor the deployment progress in ArgoCD dashboard at: https://argocd.kimkao.io"
          
          # Optional: If ArgoCD CLI is configured, trigger immediate sync
          # argocd app sync genai-demo-backend --server argocd.kimkao.io --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
          # argocd app sync genai-demo-cmc-frontend --server argocd.kimkao.io --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
          # argocd app sync genai-demo-consumer-frontend --server argocd.kimkao.io --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
      
      - name: Create deployment summary
        run: |
          cat > deployment-summary.md << 'EOF'
          # 🚀 GitOps Deployment Summary
          
          ## 📦 Images Built and Pushed
          - **Backend**: `${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_BACKEND }}:${{ github.sha }}`
          - **CMC Frontend**: `${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CMC_FRONTEND }}:${{ github.sha }}`
          - **Consumer Frontend**: `${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_CONSUMER_FRONTEND }}:${{ github.sha }}`
          
          ## 🔄 Deployment Strategy
          - **Backend**: Blue-Green deployment with automated analysis
          - **CMC Frontend**: Canary deployment with gradual traffic shifting (10% → 25% → 50% → 75% → 100%)
          - **Consumer Frontend**: Canary deployment with gradual traffic shifting (10% → 25% → 50% → 75% → 100%)
          
          ## 📊 Monitoring & Rollback
          - **Health Metrics**: Error rate, response time, availability monitoring
          - **Automated Rollback**: Triggered on health metric thresholds
          - **Analysis Templates**: Success rate and performance analysis at each step
          
          ## 🎯 Next Steps
          1. **ArgoCD Detection**: ArgoCD will automatically detect the updated manifests within 3 minutes
          2. **Sync Process**: Applications will sync according to their configured policies
          3. **Deployment Execution**: 
             - Backend: Blue-Green switch after successful analysis
             - Frontends: Gradual canary rollout with automated promotion
          4. **Monitoring**: Watch deployment progress in ArgoCD dashboard
          
          ## 🔗 Access Points
          - **ArgoCD Dashboard**: https://argocd.kimkao.io
          - **Backend API**: https://api.kimkao.io
          - **CMC Frontend**: https://cmc.kimkao.io
          - **Consumer Frontend**: https://shop.kimkao.io
          
          ## 🔄 Rollback Instructions
          ### Automatic Rollback
          - Triggered automatically if health metrics exceed thresholds
          - Error rate > 5%, Response time > 2s, Availability < 99%
          
          ### Manual Rollback Options
          1. **ArgoCD UI**: Use rollback feature in ArgoCD dashboard
          2. **CLI**: `kubectl argo rollouts abort <rollout-name> -n genai-demo`
          3. **Git Revert**: Revert the commit and push to trigger re-deployment
          
          ## 📈 Monitoring Commands
          ```bash
          # Watch rollout status
          kubectl argo rollouts get rollout genai-demo-backend -n genai-demo --watch
          kubectl argo rollouts get rollout genai-demo-cmc-frontend -n genai-demo --watch
          kubectl argo rollouts get rollout genai-demo-consumer-frontend -n genai-demo --watch
          
          # Check application sync status
          kubectl get applications -n argocd
          
          # View rollout analysis
          kubectl get analysisruns -n genai-demo
          ```
          
          EOF
      
      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: gitops-deployment-summary
          path: deployment-summary.md
          retention-days: 90
      
      - name: Create deployment status badge
        run: |
          # Create a simple deployment status file
          echo "deployment_status=success" > deployment-status.env
          echo "deployment_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> deployment-status.env
          echo "deployment_commit=${{ github.sha }}" >> deployment-status.env
          echo "deployment_branch=${{ github.ref_name }}" >> deployment-status.env
      
      - name: Upload deployment status
        uses: actions/upload-artifact@v4
        with:
          name: deployment-status
          path: deployment-status.env
          retention-days: 30

  # Job 9: Notification and Cleanup
  notify-and-cleanup:
    name: Notifications & Cleanup
    runs-on: ubuntu-latest
    needs: [quality-gates, gitops-deployment]
    if: always()
    
    steps:
      - name: Download deployment artifacts
        if: needs.gitops-deployment.result == 'success'
        uses: actions/download-artifact@v5
        with:
          name: gitops-deployment-summary
          path: ./
      
      - name: Notify on success
        if: needs.quality-gates.result == 'success' && needs.gitops-deployment.result == 'success'
        run: |
          echo "✅ GitOps CI/CD Pipeline completed successfully!"
          echo "- All quality gates passed"
          echo "- Docker images built and pushed to ECR"
          echo "- Kubernetes manifests updated with new image tags"
          echo "- ArgoCD will automatically sync applications"
          echo ""
          echo "🔗 Monitor deployment progress:"
          echo "- ArgoCD Dashboard: https://argocd.kimkao.io"
          echo "- Backend API: https://api.kimkao.io"
          echo "- CMC Frontend: https://cmc.kimkao.io"
          echo "- Consumer Frontend: https://shop.kimkao.io"
          echo ""
          echo "📊 Deployment Strategies:"
          echo "- Backend: Blue-Green deployment"
          echo "- Frontends: Canary deployment with gradual traffic shifting"
          echo ""
          echo "🔄 Automated rollback is enabled based on health metrics"
      
      - name: Notify on deployment failure
        if: needs.quality-gates.result == 'success' && needs.gitops-deployment.result == 'failure'
        run: |
          echo "⚠️ CI/CD Pipeline completed with deployment issues!"
          echo "- Quality gates passed"
          echo "- Docker images built successfully"
          echo "- Deployment preparation failed"
          echo ""
          echo "🔍 Check the gitops-deployment job for details"
          echo "- Verify Kubernetes manifest syntax"
          echo "- Check image tag updates"
          echo "- Review Git commit and push operations"
      
      - name: Notify on quality gate failure
        if: needs.quality-gates.result == 'failure'
        run: |
          echo "❌ CI/CD Pipeline failed at quality gates!"
          echo "- Check the quality gates job for details"
          echo "- Review test results and security scans"
          echo "- Fix issues before deployment can proceed"
          echo ""
          echo "🔍 Common issues to check:"
          echo "- Test failures in unit, integration, BDD, or architecture tests"
          echo "- Security vulnerabilities above threshold"
          echo "- Code coverage below required threshold"
          echo "- Container security scan failures"
      
      - name: Create pipeline summary
        if: always()
        run: |
          cat > pipeline-summary.md << 'EOF'
          # 📋 CI/CD Pipeline Summary
          
          ## Pipeline Status
          - **Quality Gates**: ${{ needs.quality-gates.result }}
          - **GitOps Deployment**: ${{ needs.gitops-deployment.result }}
          - **Overall Status**: ${{ (needs.quality-gates.result == 'success' && needs.gitops-deployment.result == 'success') && '✅ SUCCESS' || '❌ FAILED' }}
          
          ## Commit Information
          - **Branch**: ${{ github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Author**: ${{ github.actor }}
          - **Trigger**: ${{ github.event_name }}
          
          ## Deployment Information
          ${{ needs.gitops-deployment.result == 'success' && '- **Status**: Manifests updated, ArgoCD sync in progress' || '- **Status**: Deployment preparation failed' }}
          - **Timestamp**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Next Steps
          ${{ needs.gitops-deployment.result == 'success' && '1. Monitor ArgoCD dashboard for sync progress
          2. Watch rollout status using kubectl argo rollouts commands
          3. Verify application health after deployment
          4. Check automated rollback if issues occur' || '1. Review failed job logs
          2. Fix identified issues
          3. Push fixes to trigger new pipeline run' }}
          
          EOF
      
      - name: Upload pipeline summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-summary
          path: pipeline-summary.md
          retention-days: 90
      
      - name: Cleanup old artifacts
        run: |
          echo "🧹 Cleanup completed - artifacts will be retained according to retention policies"
          echo "- Test results: 30 days"
          echo "- Security scans: 30 days"
          echo "- Deployment summaries: 90 days"
          echo "- Pipeline summaries: 90 days"