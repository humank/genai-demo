plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.13'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2' // Allure 插件
}

group = 'solid.humank'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Allure 配置
allure {
    version = '2.22.1'
    useJUnit5 {
        version = '2.22.1'
    }
}

// 定義 Allure 結果目錄
def allureResultsDir = layout.buildDirectory.dir('allure-results').get().asFile.absolutePath

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // WebSocket support removed for simplicity
    // implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.h2database:h2'
    
    // PostgreSQL driver for production profile
    runtimeOnly 'org.postgresql:postgresql'
    
    // Kafka support removed for simplicity
    // implementation 'org.springframework.kafka:spring-kafka'
    // testImplementation 'org.springframework.kafka:spring-kafka-test'
    
    // AOP support for logging aspects
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // Resilience4j for circuit breaker pattern
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    
    // Micrometer for metrics collection
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    
    // OpenTelemetry for distributed tracing
    implementation 'io.opentelemetry:opentelemetry-api:1.54.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.54.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.54.0'
    // Note: jaeger exporter is deprecated, use OTLP exporter instead
    implementation 'io.opentelemetry.semconv:opentelemetry-semconv:1.21.0-alpha'
    
    // AWS X-Ray support for production
    implementation('com.amazonaws:aws-xray-recorder-sdk-core:2.15.1') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
    implementation('com.amazonaws:aws-xray-recorder-sdk-spring:2.15.1') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
    
    // AWS SDK v2 for analytics and security
    implementation platform('software.amazon.awssdk:bom:2.21.29')
    implementation 'software.amazon.awssdk:firehose'
    implementation 'software.amazon.awssdk:secretsmanager'
    implementation 'software.amazon.awssdk:cloudwatch'
    
    // Security dependencies
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Unified HttpComponents5 dependencies with consistent versions
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'
    implementation 'org.apache.httpcomponents.core5:httpcore5-h2:5.2.4'
    
    // Test-specific HTTP client dependencies
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    testImplementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.3.1'
    
    // Logback encoder for structured logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // OpenAPI 3 (Swagger) 支援 - 使用與 Spring Boot 3.4.9 兼容的版本
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // Kotlin reflection for SpringDoc (required by SpringDoc 2.x) - 更新版本
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.25'
    

    
    // Cucumber for BDD testing
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'io.cucumber:cucumber-spring:7.15.0'
    
    // JUnit 5
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.platform:junit-platform-suite')
    
    // 確保 JUnit Platform 相關依賴版本一致
    constraints {
        testImplementation('org.junit.platform:junit-platform-commons:1.13.4')
        testImplementation('org.junit.platform:junit-platform-engine:1.13.4')
    }
    
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    
    // Spring Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Allure 依賴
    testImplementation 'io.qameta.allure:allure-junit5:2.22.1'
    testImplementation 'io.qameta.allure:allure-cucumber7-jvm:2.22.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.22.1'
    
    // ArchUnit for architecture testing
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
    
    compileOnly 'org.projectlombok:lombok:1.18.40'
    annotationProcessor 'org.projectlombok:lombok:1.18.40'
    testCompileOnly 'org.projectlombok:lombok:1.18.40'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.40'
}

// 配置 Java 編譯和執行任務啟用預覽功能
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '--enable-preview'
    options.compilerArgs += '-Xlint:unchecked'
    // 暫時關閉棄用警告，避免過多輸出
    // options.compilerArgs += '-Xlint:deprecation'
    options.release = 21
    
    // 增加編譯器記憶體
    options.forkOptions.jvmArgs += [
        '-Xmx3g',
        '-XX:MaxMetaspaceSize=1g',
        '-XX:+UseG1GC',
        '-XX:G1HeapRegionSize=32m'
    ]
    options.fork = true
}

tasks.withType(Test).configureEach {
    jvmArgs += '--enable-preview'
    
    // 基本記憶體配置
    maxHeapSize = '4g'
    minHeapSize = '1g'
    
    // 基本JVM參數
    jvmArgs += [
        '-XX:MaxMetaspaceSize=1g',
        '-XX:+UseG1GC',
        '-Xshare:off'
    ]
    
    // 測試執行配置
    maxParallelForks = 1
    forkEvery = 5
    
    // 測試執行超時配置
    timeout = Duration.ofMinutes(15)
    
    // 基本系統屬性
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'ERROR'
    systemProperty 'spring.jmx.enabled', 'false'
    systemProperty 'spring.main.lazy-initialization', 'true'
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
}

// ============================================================================
// 分層測試任務配置 - 遵循測試金字塔原則
// ============================================================================

// 快速單元測試任務 - 日常開發使用
tasks.register('unitTest', Test) {
    description = '運行快速單元測試'
    group = 'verification'
    
    useJUnitPlatform {
        excludeTags 'integration', 'end-to-end', 'slow'
        includeTags 'unit'
    }
    
    maxHeapSize = '2g'
    minHeapSize = '512m'
    
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = false
        exceptionFormat = 'short'
    }
    
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'ERROR'
}

// 集成測試任務 - 提交前使用
tasks.register('integrationTest', Test) {
    description = '運行集成測試'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
        excludeTags 'end-to-end', 'slow'
    }
    
    maxHeapSize = '6g'
    minHeapSize = '2g'
    maxParallelForks = 1
    forkEvery = 3
    
    timeout = Duration.ofMinutes(30)
    
    testLogging {
        events "failed", "skipped"
        showStandardStreams = false
        exceptionFormat = 'short'
    }
    
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'ERROR'
}


// 端到端測試任務 - 發布前使用
tasks.register('e2eTest', Test) {
    description = '運行端到端測試'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'end-to-end'
    }
    
    maxHeapSize = '6g'
    minHeapSize = '2g'
    maxParallelForks = 1
    forkEvery = 2
    
    timeout = Duration.ofMinutes(60)
    
    testLogging {
        events "failed", "skipped", "passed"
        showStandardStreams = false
        exceptionFormat = 'short'
    }
    
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'INFO'
}

// 標準測試任務 - 保持向後兼容
tasks.named('test') {
    description = '運行所有測試'
    
    useJUnitPlatform()
    
    maxHeapSize = '4g'
    minHeapSize = '1g'
    
    testLogging {
        events "failed"
        showStandardStreams = false
        exceptionFormat = 'short'
    }
    
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'ERROR'
}

// Cucumber 測試任務
tasks.register('cucumber', JavaExec) {
    dependsOn assemble, testClasses
    getMainClass().set("io.cucumber.core.cli.Main")
    classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
    
    maxHeapSize = '4g'
    jvmArgs += ['--enable-preview', '-Xshare:off']
    
    args = [
        '--plugin', 'progress',
        '--plugin', 'html:build/reports/cucumber/cucumber-report.html',
        '--plugin', 'json:build/reports/cucumber/cucumber-report.json',
        '--glue', 'solid.humank.genaidemo.bdd',
        'src/test/resources/features'
    ]
    
    systemProperty 'logging.level.root', 'ERROR'
}



// ============================================================================
// 便捷的測試任務組合
// ============================================================================

// 快速驗證 - 日常開發
tasks.register('quickTest') {
    dependsOn unitTest
    description = '快速測試 - 日常開發使用 (< 2分鐘)'
    group = 'verification'
    
    doLast {
        println "✅ 快速測試完成 - 單元測試通過"
    }
}

// 提交前驗證
tasks.register('preCommitTest') {
    dependsOn unitTest, integrationTest
    description = '提交前測試 - 包含單元測試和集成測試 (< 5分鐘)'
    group = 'verification'
    
    doLast {
        println "✅ 提交前測試完成 - 單元測試和集成測試通過"
    }
}

// 完整驗證 - 發布前
tasks.register('fullTest') {
    dependsOn unitTest, integrationTest, e2eTest, cucumber
    description = '完整測試 - 發布前使用，包含所有測試類型'
    group = 'verification'
    
    doLast {
        println "✅ 完整測試完成 - 所有測試通過"
    }
}

// 運行所有測試並生成報告（保持向後兼容）
tasks.register('runAllTests') {
    dependsOn test, cucumber, prepareAllureResults
    description = '運行所有測試並生成 Allure 報告（向後兼容）'
    group = 'verification'
    
    doLast {
        println "所有測試已完成，包括單元測試和 Cucumber 測試"
    }
    
    finalizedBy 'allureReport', 'generatePerformanceReport'
}

// 生成測試性能報告
tasks.register('generatePerformanceReport', JavaExec) {
    description = '生成測試性能報告'
    group = 'reporting'
    
    dependsOn testClasses
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'solid.humank.genaidemo.testutils.TestPerformanceReportGenerator'
    
    // 確保報告目錄存在
    doFirst {
        mkdir "${buildDir}/reports/test-performance"
    }
    
    doLast {
        println "測試性能報告已生成: ${buildDir}/reports/test-performance/"
    }
}

// 運行所有測試
tasks.register('runAllTestsComplete') {
    dependsOn test, cucumber, prepareAllureResults
    description = '運行所有測試並生成 Allure 報告'
    group = 'verification'
    
    doLast {
        println "所有測試已完成，包括單元測試、Cucumber 測試和性能測試"
    }
    
    finalizedBy 'allureReport'
}

// 運行所有測試並啟動報告服務器
tasks.register('runAllTestsWithReport') {
    dependsOn 'runAllTests'
    description = '運行所有測試並啟動 Allure 報告服務器'
    group = 'verification'
    
    finalizedBy 'allureServe'
}

// 清理 Allure 結果目錄
tasks.register('cleanAllureResults', Delete) {
    delete(allureResultsDir)
    description = '清理 Allure 結果目錄'
    group = 'build'
}

// 創建堆轉儲目錄
tasks.register('createHeapDumpDir') {
    description = '創建堆轉儲目錄'
    group = 'build'
    
    doLast {
        mkdir "${buildDir}/reports/heap-dumps"
        println "堆轉儲目錄已創建: ${buildDir}/reports/heap-dumps"
    }
}

tasks.named('clean') {
    dependsOn 'cleanAllureResults'
}

// 確保測試任務前創建必要目錄
tasks.withType(Test) {
    dependsOn 'createHeapDumpDir'
}

// 手動處理 Allure 報告生成，避免使用內建任務
tasks.register('prepareAllureResults') {
    description = '準備 Allure 報告數據'
    group = 'reporting'
    
    doLast {
        // 確保 allure-results 目錄存在
        mkdir "${buildDir}/allure-results"
        
        // 複製 Cucumber 測試結果
        copy {
            from "${buildDir}/reports/cucumber"
            into "${buildDir}/allure-results"
            include "**/*.json"
        }
        
        // 複製 JUnit 測試結果
        copy {
            from "${buildDir}/test-results/test"
            into "${buildDir}/allure-results"
            include "**/*.xml"
        }
        
        // 創建 executor.json 文件
        def executorFile = new File("${buildDir}/allure-results/executor.json")
        executorFile.text = """{
            "name": "Gradle",
            "type": "gradle",
            "buildName": "GenAI Demo Project",
            "reportName": "DDD 架構測試報告"
        }"""
        
        println "Allure 報告數據準備完成，結果目錄: ${buildDir}/allure-results"
    }
}

// 覆蓋 allureReport 任務
tasks.named('allureReport') {
    dependsOn 'prepareAllureResults'
}