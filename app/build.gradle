plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'io.qameta.allure' version '2.11.2' // Allure 插件
}

group = 'solid.humank'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

// Allure 配置
allure {
    version = '2.22.1'
    useJUnit5 {
        version = '2.22.1'
    }
}

// 定義 Allure 結果目錄
def allureResultsDir = layout.buildDirectory.dir('allure-results').get().asFile.absolutePath

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.flywaydb:flyway-core'
    implementation 'com.h2database:h2'
    
    // PostgreSQL driver for production profile
    runtimeOnly 'org.postgresql:postgresql'
    
    // Kafka support for production event publishing
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    
    // AOP support for logging aspects
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // Resilience4j for circuit breaker pattern
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-retry:2.1.0'
    
    // Micrometer for metrics collection
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'io.micrometer:micrometer-tracing-bridge-otel'
    
    // OpenTelemetry for distributed tracing
    implementation 'io.opentelemetry:opentelemetry-api:1.54.0'
    implementation 'io.opentelemetry:opentelemetry-sdk:1.54.0'
    implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.54.0'
    // Note: jaeger exporter is deprecated, use OTLP exporter instead
    implementation 'io.opentelemetry.semconv:opentelemetry-semconv:1.21.0-alpha'
    
    // AWS X-Ray support for production
    implementation('com.amazonaws:aws-xray-recorder-sdk-core:2.15.1') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
    implementation('com.amazonaws:aws-xray-recorder-sdk-spring:2.15.1') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore'
    }
    
    // AWS SDK v2 for analytics and security
    implementation platform('software.amazon.awssdk:bom:2.21.29')
    implementation 'software.amazon.awssdk:firehose'
    implementation 'software.amazon.awssdk:secretsmanager'
    implementation 'software.amazon.awssdk:cloudwatch'
    
    // Security dependencies
    implementation 'org.springframework.boot:spring-boot-starter-security'
    
    // Unified HttpComponents5 dependencies with consistent versions
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'
    implementation 'org.apache.httpcomponents.core5:httpcore5-h2:5.2.4'
    
    // Test-specific HTTP client dependencies
    testImplementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    testImplementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'
    testImplementation 'org.apache.httpcomponents.client5:httpclient5-fluent:5.3.1'
    
    // Logback encoder for structured logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // OpenAPI 3 (Swagger) 支援 - 使用與 Spring Boot 3.4.9 兼容的版本
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
    
    // Kotlin reflection for SpringDoc (required by SpringDoc 2.x) - 更新版本
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.9.25'
    

    
    // Cucumber for BDD testing
    testImplementation 'io.cucumber:cucumber-java:7.15.0'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
    testImplementation 'io.cucumber:cucumber-spring:7.15.0'
    
    // JUnit 5
    testImplementation(platform('org.junit:junit-bom:5.10.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.junit.platform:junit-platform-suite')
    
    // 確保 JUnit Platform 相關依賴版本一致
    constraints {
        testImplementation('org.junit.platform:junit-platform-commons:1.13.4')
        testImplementation('org.junit.platform:junit-platform-engine:1.13.4')
    }
    
    // Mockito
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    
    // Spring Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    // Allure 依賴
    testImplementation 'io.qameta.allure:allure-junit5:2.22.1'
    testImplementation 'io.qameta.allure:allure-cucumber7-jvm:2.22.1'
    testImplementation 'io.qameta.allure:allure-java-commons:2.22.1'
    
    // ArchUnit for architecture testing
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
    
    compileOnly 'org.projectlombok:lombok:1.18.40'
    annotationProcessor 'org.projectlombok:lombok:1.18.40'
    testCompileOnly 'org.projectlombok:lombok:1.18.40'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.40'
}

// 配置 Java 編譯和執行任務啟用預覽功能
tasks.withType(JavaCompile).configureEach {
    options.compilerArgs += '--enable-preview'
    options.compilerArgs += '-Xlint:unchecked'
    options.release = 21
    
    // 增加編譯器記憶體
    options.forkOptions.jvmArgs += [
        '-Xmx3g',
        '-XX:MaxMetaspaceSize=1g',
        '-XX:+UseG1GC',
        '-XX:G1HeapRegionSize=32m'
    ]
    options.fork = true
}

tasks.withType(Test).configureEach {
    jvmArgs += '--enable-preview'
    // 禁用 AspectJ weaver 以避免織入問題
    jvmArgs += '-Dallure.aspectj.enabled=false'
    
    // 增強記憶體配置以支持記憶體密集型測試
    maxHeapSize = '6g'  // 增加預設堆記憶體
    minHeapSize = '2g'  // 增加最小堆記憶體
    
    // 優化的JVM參數 - 支持記憶體密集型操作
    jvmArgs += [
        '-XX:MaxMetaspaceSize=1g',
        '-XX:+UseG1GC',
        '-XX:+UseStringDeduplication',
        '-XX:G1HeapRegionSize=32m',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:G1NewSizePercent=25',  // 增加新生代比例
        '-XX:G1MaxNewSizePercent=35',
        '-XX:+HeapDumpOnOutOfMemoryError',  // OOM時生成堆轉儲
        '-XX:HeapDumpPath=build/reports/heap-dumps/',
        '-Xshare:off',  // 禁用類共享以避免 bootstrap classpath 警告
        // HttpComponents 專用JVM參數 - 適用於所有測試
        '-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog',
        '-Dorg.apache.commons.logging.simplelog.showdatetime=false',
        '-Dorg.apache.commons.logging.simplelog.log.org.apache.http=ERROR',
        // 網路配置優化
        '-Dsun.net.useExclusiveBind=false',
        '-Djava.net.preferIPv4Stack=true',
        '-Djava.security.egd=file:/dev/./urandom'
    ]
    
    // 測試執行配置 - 優化記憶體使用
    maxParallelForks = 1  // 單線程執行避免記憶體競爭
    forkEvery = 3         // 更頻繁重啟 JVM 以釋放記憶體
    
    // 合理的測試 JVM 記憶體配置
    minHeapSize = "2g"
    maxHeapSize = "6g"    // 減少到 6g，應該足夠了
    
    // 測試執行超時配置
    timeout = Duration.ofMinutes(15)  // 預設測試超時15分鐘
    
    // Set system properties for test environment
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'management.health.defaults.enabled', 'false'
    systemProperty 'management.endpoint.health.show-details', 'never'
    
    // HTTP 客戶端超時配置
    systemProperty 'http.client.connection.timeout', '5000'
    systemProperty 'http.client.socket.timeout', '15000'
    systemProperty 'http.client.connection.request.timeout', '3000'
    
    // 減少日誌輸出 - 只顯示錯誤
    systemProperty 'logging.level.root', 'ERROR'
    systemProperty 'logging.level.org.springframework', 'ERROR'
    systemProperty 'logging.level.org.hibernate', 'ERROR'
    systemProperty 'logging.level.solid.humank.genaidemo', 'ERROR'
    
    // 禁用不必要的功能以節省記憶體
    systemProperty 'spring.jmx.enabled', 'false'
    systemProperty 'spring.main.lazy-initialization', 'true'
    
    // AspectJ 優化 - 完全禁用 Load-Time Weaving 以節省記憶體和減少日誌
    systemProperty 'aj.weaving.verbose', 'false'
    systemProperty 'org.aspectj.weaver.showWeaveInfo', 'false'
    systemProperty 'org.aspectj.weaver.Dump.exception', 'false'
    systemProperty 'org.aspectj.weaver.loadtime.debug', 'false'
    systemProperty 'org.aspectj.weaver.verbose', 'false'
    systemProperty 'org.aspectj.weaver.debug', 'false'
    systemProperty 'org.aspectj.weaver.messages', 'false'
    systemProperty 'org.aspectj.ltw.enabled', 'false'  // 完全禁用 Load-Time Weaving
    systemProperty 'spring.aop.auto', 'false'          // 禁用 Spring AOP 自動配置
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += '--enable-preview'
}

// ============================================================================
// 分層測試任務配置 - 遵循測試金字塔原則
// ============================================================================

// 快速單元測試任務 - 日常開發使用
tasks.register('unitTest', Test) {
    description = '運行快速單元測試 (~5MB, ~50ms 每個)'
    group = 'verification'
    
    useJUnitPlatform {
        excludeTags 'integration', 'end-to-end', 'slow'
        includeTags 'unit'
    }
    
    // 輕量級配置
    maxHeapSize = '2g'
    minHeapSize = '512m'
    maxParallelForks = Runtime.runtime.availableProcessors()
    forkEvery = 0  // 不重啟 JVM，提高速度
    
    // 快速反饋配置
    testLogging {
        events "passed", "failed", "skipped"
        showStandardStreams = false
        exceptionFormat = 'short'
    }
    
    // 基本系統屬性 - 使用最小化配置
    systemProperty 'spring.profiles.active', 'test-minimal'
    systemProperty 'logging.level.root', 'ERROR'
    systemProperty 'logging.level.org.aspectj', 'OFF'
    systemProperty 'logging.level.io.qameta.allure', 'OFF'
    systemProperty 'spring.main.lazy-initialization', 'true'
    systemProperty 'spring.jmx.enabled', 'false'
    
    // AspectJ 日誌抑制
    systemProperty 'aj.weaving.verbose', 'false'
    systemProperty 'org.aspectj.weaver.showWeaveInfo', 'false'
    systemProperty 'org.aspectj.weaver.verbose', 'false'
    systemProperty 'org.aspectj.weaver.debug', 'false'
    systemProperty 'org.aspectj.ltw.enabled', 'false'
}

// 集成測試任務 - 提交前使用
tasks.register('integrationTest', Test) {
    description = '運行集成測試 (~50MB, ~500ms 每個)'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'integration'
        excludeTags 'end-to-end', 'slow'
    }
    
    // 優化的記憶體配置 - 針對記憶體密集型測試
    maxHeapSize = '8g'  // 增加到8g以支持記憶體密集型測試
    minHeapSize = '3g'  // 增加最小堆大小以減少GC頻率
    maxParallelForks = 1  // 單線程執行避免記憶體競爭
    forkEvery = 3  // 更頻繁重啟JVM以釋放記憶體，避免記憶體洩漏
    
    // 記憶體密集型測試專用的JVM參數
    jvmArgs += [
        '--enable-preview',
        // 記憶體管理優化
        '-XX:MaxMetaspaceSize=2g',  // 增加Metaspace以支持更多類加載
        '-XX:+UseG1GC',  // 使用G1垃圾收集器，適合大堆記憶體
        '-XX:+UseStringDeduplication',  // 字符串去重以節省記憶體
        '-XX:G1HeapRegionSize=64m',  // 增大堆區域大小以減少GC開銷
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:G1NewSizePercent=30',  // 增加新生代比例
        '-XX:G1MaxNewSizePercent=40',  // 增加新生代最大比例
        '-XX:G1MixedGCCountTarget=8',  // 優化混合GC
        '-XX:G1HeapWastePercent=5',  // 減少堆浪費
        '-XX:+G1UseAdaptiveIHOP',  // 自適應初始堆佔用百分比
        '-XX:G1MixedGCLiveThresholdPercent=85',  // 混合GC存活閾值
        // 記憶體洩漏檢測和優化
        '-XX:+HeapDumpOnOutOfMemoryError',  // OOM時生成堆轉儲
        '-XX:HeapDumpPath=build/reports/heap-dumps/',  // 堆轉儲路徑
        '-XX:+ExitOnOutOfMemoryError',  // OOM時退出JVM
        // 性能優化
        '-Xshare:off',  // 禁用類共享以避免bootstrap classpath警告
        '-XX:+UseCompressedOops',  // 壓縮對象指針
        '-XX:+UseCompressedClassPointers',  // 壓縮類指針
        // HttpComponents 專用JVM參數
        '-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog',
        '-Dorg.apache.commons.logging.simplelog.showdatetime=true',
        '-Dorg.apache.commons.logging.simplelog.log.org.apache.http=DEBUG',
        '-Dorg.apache.http.wire=DEBUG',
        // 網路和安全配置
        '-Dsun.net.useExclusiveBind=false',
        '-Djava.net.preferIPv4Stack=true',
        '-Djava.security.egd=file:/dev/./urandom'  // 加速隨機數生成
    ]
    
    // 測試執行超時配置 - 記憶體密集型測試需要更長時間
    timeout = Duration.ofMinutes(45)  // 整體測試套件超時45分鐘
    
    testLogging {
        events "failed", "skipped", "started"
        showStandardStreams = false
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
    
    systemProperties = [
        // JUnit 配置 - 記憶體密集型測試需要更長超時
        'junit.jupiter.execution.timeout.default': '5m',  // 單個測試方法超時5分鐘
        'junit.jupiter.execution.timeout.testable.method.default': '5m',
        'junit.jupiter.execution.timeout.testtemplate.method.default': '5m',
        'junit.jupiter.execution.parallel.enabled': 'false',  // 禁用並行執行以避免資源競爭
        
        // Spring 測試配置
        'spring.profiles.active': 'test',
        'spring.main.lazy-initialization': 'true',
        'spring.jmx.enabled': 'false',
        
        // HTTP 客戶端配置
        'http.client.connection.timeout': '10000',  // 10秒連接超時
        'http.client.socket.timeout': '30000',      // 30秒讀取超時
        'http.client.connection.request.timeout': '5000',  // 5秒請求超時
        
        // 日誌配置
        'logging.level.root': 'ERROR',
        'logging.level.solid.humank.genaidemo': 'INFO',
        'logging.level.org.springframework.web': 'DEBUG',
        'logging.level.org.apache.http': 'DEBUG',
        'logging.level.org.aspectj': 'OFF',
        'logging.level.io.qameta.allure': 'OFF',
        
        // 測試資源管理
        'test.resource.cleanup.enabled': 'true',
        'test.memory.monitoring.enabled': 'true'
    ]
}


// 端到端測試任務 - 發布前使用
tasks.register('e2eTest', Test) {
    description = '運行端到端測試 (~500MB, ~3s 每個)'
    group = 'verification'
    
    useJUnitPlatform {
        includeTags 'end-to-end'
    }
    
    // 完整配置 - 針對端到端測試優化
    maxHeapSize = '8g'  // 增加到8g以支持完整的端到端測試
    minHeapSize = '3g'  // 增加最小堆大小
    maxParallelForks = 1
    forkEvery = 2  // 每2個測試重啟JVM以確保乾淨的環境
    
    // 端到端測試專用的JVM參數
    jvmArgs += [
        '--enable-preview',
        '-XX:MaxMetaspaceSize=2g',  // 增加Metaspace以支持更多類加載
        '-XX:+UseG1GC',
        '-XX:+UseStringDeduplication',
        '-XX:G1HeapRegionSize=32m',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:G1NewSizePercent=20',
        '-XX:G1MaxNewSizePercent=30',
        '-Xshare:off',
        // HttpComponents 專用JVM參數
        '-Dorg.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog',
        '-Dorg.apache.commons.logging.simplelog.showdatetime=true',
        '-Dorg.apache.commons.logging.simplelog.log.org.apache.http=INFO',
        // 網路和安全配置
        '-Dsun.net.useExclusiveBind=false',
        '-Djava.net.preferIPv4Stack=true',
        '-Djava.security.egd=file:/dev/./urandom'  // 加速隨機數生成
    ]
    
    // 測試執行超時配置 - 端到端測試需要更長時間
    timeout = Duration.ofHours(1)  // 整體測試套件超時1小時
    
    testLogging {
        events "failed", "skipped", "passed", "started"
        showStandardStreams = true
        exceptionFormat = 'full'
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
    
    systemProperties = [
        // JUnit 配置 - 端到端測試需要更長超時
        'junit.jupiter.execution.timeout.default': '5m',  // 單個測試方法超時5分鐘
        'junit.jupiter.execution.timeout.testable.method.default': '5m',
        'junit.jupiter.execution.timeout.testtemplate.method.default': '5m',
        'junit.jupiter.execution.parallel.enabled': 'false',
        
        // Spring 測試配置
        'spring.profiles.active': 'test',
        'spring.main.lazy-initialization': 'false',  // 端到端測試需要完整初始化
        'spring.jmx.enabled': 'false',
        
        // HTTP 客戶端配置 - 端到端測試需要更長超時
        'http.client.connection.timeout': '30000',  // 30秒連接超時
        'http.client.socket.timeout': '60000',      // 60秒讀取超時
        'http.client.connection.request.timeout': '10000',  // 10秒請求超時
        
        // 日誌配置
        'logging.level.root': 'INFO',
        'logging.level.solid.humank.genaidemo': 'DEBUG',
        'logging.level.org.springframework.web': 'DEBUG',
        'logging.level.org.apache.http': 'INFO',
        
        // 測試資源管理
        'test.resource.cleanup.enabled': 'true',
        'test.memory.monitoring.enabled': 'true',
        'test.performance.monitoring.enabled': 'true'
    ]
}

// 標準測試任務 - 保持向後兼容，但優化配置
tasks.named('test') {
    description = '運行所有測試（向後兼容）'
    
    useJUnitPlatform {
        // 包含所有測試
    }
    
    // 優化後的配置
    maxHeapSize = '4g'
    minHeapSize = '1g'
    maxParallelForks = 2
    forkEvery = 5
    
    // Allure 配置
    systemProperty 'allure.results.directory', layout.buildDirectory.dir("allure-results").get().asFile.absolutePath
    systemProperty 'allure.epic', 'DDD架構測試'
    systemProperty 'allure.feature', 'JUnit測試'
    
    // 簡化測試日誌輸出
    testLogging {
        events "failed"
        showStandardStreams = false
        exceptionFormat = 'short'
        showExceptions = true
        showCauses = true
        showStackTraces = false
    }
    
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
    systemProperty 'junit.platform.output.capture.stdout', 'false'
    systemProperty 'junit.platform.output.capture.stderr', 'true'
    systemProperty 'spring.profiles.active', 'test'
    systemProperty 'logging.level.root', 'ERROR'
}

// Cucumber 測試任務
tasks.register('cucumber', JavaExec) {
    dependsOn assemble, testClasses
    getMainClass().set("io.cucumber.core.cli.Main")
    classpath = configurations.testRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
    
    // 增加記憶體配置
    maxHeapSize = '4g'
    jvmArgs += [
        '--enable-preview',
        '-XX:MaxMetaspaceSize=1g',
        '-XX:+UseG1GC',
        '-XX:+UseStringDeduplication',
        '-XX:G1HeapRegionSize=32m',
        '-Xshare:off'  // 禁用類共享以避免 bootstrap classpath 警告
    ]
    
    args = [
        '--plugin', 'progress',  // 使用簡潔的 progress 輸出而非 pretty
        '--plugin', 'html:build/reports/cucumber/cucumber-report.html',
        '--plugin', 'json:build/reports/cucumber/cucumber-report.json',
        '--plugin', 'io.qameta.allure.cucumber7jvm.AllureCucumber7Jvm',
        '--glue', 'solid.humank.genaidemo.bdd',
        'src/test/resources/features'
    ]
    
    systemProperty 'allure.results.directory', layout.buildDirectory.dir("allure-results").get().asFile.absolutePath
    systemProperty 'allure.epic', 'BDD功能測試'
    systemProperty 'allure.feature', 'Cucumber測試'
    
    // 減少日誌輸出
    systemProperty 'logging.level.root', 'ERROR'
    systemProperty 'logging.level.org.springframework', 'ERROR'
    systemProperty 'logging.level.solid.humank.genaidemo', 'ERROR'
    
    // 確保 Cucumber 測試結果被正確處理
    finalizedBy 'prepareAllureResults'
}



// ============================================================================
// 便捷的測試任務組合
// ============================================================================

// 快速驗證 - 日常開發
tasks.register('quickTest') {
    dependsOn unitTest
    description = '快速測試 - 日常開發使用 (< 2分鐘)'
    group = 'verification'
    
    doLast {
        println "✅ 快速測試完成 - 單元測試通過"
    }
}

// 提交前驗證
tasks.register('preCommitTest') {
    dependsOn unitTest, integrationTest
    description = '提交前測試 - 包含單元測試和集成測試 (< 5分鐘)'
    group = 'verification'
    
    doLast {
        println "✅ 提交前測試完成 - 單元測試和集成測試通過"
    }
}

// 完整驗證 - 發布前
tasks.register('fullTest') {
    dependsOn unitTest, integrationTest, e2eTest, cucumber
    description = '完整測試 - 發布前使用，包含所有測試類型'
    group = 'verification'
    
    doLast {
        println "✅ 完整測試完成 - 所有測試通過"
    }
}

// 運行所有測試並生成報告（保持向後兼容）
tasks.register('runAllTests') {
    dependsOn test, cucumber, prepareAllureResults
    description = '運行所有測試並生成 Allure 報告（向後兼容）'
    group = 'verification'
    
    doLast {
        println "所有測試已完成，包括單元測試和 Cucumber 測試"
    }
    
    finalizedBy 'allureReport', 'generatePerformanceReport'
}

// 生成測試性能報告
tasks.register('generatePerformanceReport', JavaExec) {
    description = '生成測試性能報告'
    group = 'reporting'
    
    dependsOn testClasses
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'solid.humank.genaidemo.testutils.TestPerformanceReportGenerator'
    
    // 確保報告目錄存在
    doFirst {
        mkdir "${buildDir}/reports/test-performance"
    }
    
    doLast {
        println "測試性能報告已生成: ${buildDir}/reports/test-performance/"
    }
}

// 運行所有測試
tasks.register('runAllTestsComplete') {
    dependsOn test, cucumber, prepareAllureResults
    description = '運行所有測試並生成 Allure 報告'
    group = 'verification'
    
    doLast {
        println "所有測試已完成，包括單元測試、Cucumber 測試和性能測試"
    }
    
    finalizedBy 'allureReport'
}

// 運行所有測試並啟動報告服務器
tasks.register('runAllTestsWithReport') {
    dependsOn 'runAllTests'
    description = '運行所有測試並啟動 Allure 報告服務器'
    group = 'verification'
    
    finalizedBy 'allureServe'
}

// 清理 Allure 結果目錄
tasks.register('cleanAllureResults', Delete) {
    delete(allureResultsDir)
    description = '清理 Allure 結果目錄'
    group = 'build'
}

// 創建堆轉儲目錄
tasks.register('createHeapDumpDir') {
    description = '創建堆轉儲目錄'
    group = 'build'
    
    doLast {
        mkdir "${buildDir}/reports/heap-dumps"
        println "堆轉儲目錄已創建: ${buildDir}/reports/heap-dumps"
    }
}

tasks.named('clean') {
    dependsOn 'cleanAllureResults'
}

// 確保測試任務前創建必要目錄
tasks.withType(Test) {
    dependsOn 'createHeapDumpDir'
}

// 手動處理 Allure 報告生成，避免使用內建任務
tasks.register('prepareAllureResults') {
    description = '準備 Allure 報告數據'
    group = 'reporting'
    
    doLast {
        // 確保 allure-results 目錄存在
        mkdir "${buildDir}/allure-results"
        
        // 複製 Cucumber 測試結果
        copy {
            from "${buildDir}/reports/cucumber"
            into "${buildDir}/allure-results"
            include "**/*.json"
        }
        
        // 複製 JUnit 測試結果
        copy {
            from "${buildDir}/test-results/test"
            into "${buildDir}/allure-results"
            include "**/*.xml"
        }
        
        // 創建 executor.json 文件
        def executorFile = new File("${buildDir}/allure-results/executor.json")
        executorFile.text = """{
            "name": "Gradle",
            "type": "gradle",
            "buildName": "GenAI Demo Project",
            "reportName": "DDD 架構測試報告"
        }"""
        
        println "Allure 報告數據準備完成，結果目錄: ${buildDir}/allure-results"
    }
}

// 覆蓋 allureReport 任務
tasks.named('allureReport') {
    dependsOn 'prepareAllureResults'
}