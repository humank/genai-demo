package solid.humank.genaidemo.infrastructure.customer;

import solid.humank.genaidemo.domain.customer.model.aggregate.Customer;
import solid.humank.genaidemo.domain.customer.model.valueobject.CustomerId;
import solid.humank.genaidemo.domain.customer.model.valueobject.CustomerName;
import solid.humank.genaidemo.domain.customer.model.valueobject.Email;
import solid.humank.genaidemo.domain.customer.model.valueobject.Phone;
import solid.humank.genaidemo.domain.customer.model.valueobject.Address;
import solid.humank.genaidemo.domain.customer.model.valueobject.MembershipLevel;
import solid.humank.genaidemo.domain.customer.repository.CustomerRepository;
import org.springframework.stereotype.Repository;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * 客戶儲存庫實現
 */
@Repository
public class CustomerRepositoryImpl implements CustomerRepository {
    
    private final DataSource dataSource;
    
    public CustomerRepositoryImpl(DataSource dataSource) {
        this.dataSource = dataSource;
    }
    
    @Override
    public Optional<Customer> findById(CustomerId customerId) {
        if (!existsById(customerId)) {
            return Optional.empty();
        }
        
        // 根據客戶ID生成客戶信息（模擬數據）
        Customer customer = generateCustomer(customerId);
        return Optional.of(customer);
    }
    
    @Override
    public List<CustomerId> findAllCustomerIds() {
        List<CustomerId> customerIds = new ArrayList<>();
        
        try (Connection conn = dataSource.getConnection()) {
            String sql = "SELECT DISTINCT customer_id FROM orders ORDER BY customer_id";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    customerIds.add(new CustomerId(rs.getString("customer_id")));
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("獲取客戶ID列表時發生錯誤", e);
        }
        
        return customerIds;
    }
    
    @Override
    public List<CustomerId> findCustomerIds(int page, int size) {
        List<CustomerId> allIds = findAllCustomerIds();
        int startIndex = page * size;
        int endIndex = Math.min(startIndex + size, allIds.size());
        
        if (startIndex >= allIds.size()) {
            return new ArrayList<>();
        }
        
        return allIds.subList(startIndex, endIndex);
    }
    
    @Override
    public int countCustomers() {
        try (Connection conn = dataSource.getConnection()) {
            String sql = "SELECT COUNT(DISTINCT customer_id) FROM orders";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    return rs.getInt(1);
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("統計客戶數量時發生錯誤", e);
        }
        
        return 0;
    }
    
    @Override
    public boolean existsById(CustomerId customerId) {
        try (Connection conn = dataSource.getConnection()) {
            String sql = "SELECT COUNT(*) FROM orders WHERE customer_id = ?";
            try (PreparedStatement ps = conn.prepareStatement(sql)) {
                ps.setString(1, customerId.getValue());
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    return rs.getInt(1) > 0;
                }
            }
        } catch (Exception e) {
            throw new RuntimeException("檢查客戶是否存在時發生錯誤", e);
        }
        
        return false;
    }
    
    private Customer generateCustomer(CustomerId customerId) {
        String customerIdValue = customerId.getValue();
        
        CustomerName name = new CustomerName(generateCustomerName(customerIdValue));
        Email email = new Email(generateEmail(customerIdValue));
        Phone phone = new Phone(generatePhone(customerIdValue));
        Address address = new Address(generateAddress(customerIdValue));
        MembershipLevel membershipLevel = generateMembershipLevel(customerIdValue);
        
        return new Customer(customerId, name, email, phone, address, membershipLevel);
    }
    
    private String generateCustomerName(String customerId) {
        String[] surnames = {"張", "李", "王", "陳", "林", "黃", "吳", "劉", "蔡", "楊"};
        String[] givenNames = {"小明", "小華", "大明", "美麗", "志偉", "淑芬", "建國", "雅婷", "俊傑", "怡君"};
        
        int surnameIndex = Math.abs(customerId.hashCode()) % surnames.length;
        int givenNameIndex = Math.abs((customerId + "name").hashCode()) % givenNames.length;
        
        return surnames[surnameIndex] + givenNames[givenNameIndex];
    }
    
    private String generateEmail(String customerId) {
        String name = generateCustomerName(customerId);
        String[] domains = {"gmail.com", "yahoo.com", "hotmail.com", "email.com"};
        int domainIndex = Math.abs(customerId.hashCode()) % domains.length;
        
        String pinyin = convertToPinyin(name);
        return pinyin.toLowerCase() + "@" + domains[domainIndex];
    }
    
    private String generatePhone(String customerId) {
        int phoneNumber = Math.abs(customerId.hashCode()) % 100000000;
        return String.format("09%08d", phoneNumber);
    }
    
    private String generateAddress(String customerId) {
        String[] cities = {
            "台北市信義區信義路五段7號",
            "新北市板橋區中山路一段161號",
            "桃園市中壢區中正路123號",
            "台中市西屯區台灣大道三段99號",
            "高雄市前金區中正四路211號",
            "台南市東區東門路二段89號"
        };
        return cities[Math.abs(customerId.hashCode()) % cities.length];
    }
    
    private MembershipLevel generateMembershipLevel(String customerId) {
        MembershipLevel[] levels = MembershipLevel.values();
        return levels[Math.abs(customerId.hashCode()) % levels.length];
    }
    
    private String convertToPinyin(String chinese) {
        // 簡化的中文轉拼音實現
        return chinese.replaceAll("[\\u4e00-\\u9fa5]", "user");
    }
}