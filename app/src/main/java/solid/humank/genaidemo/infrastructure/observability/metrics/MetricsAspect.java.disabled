package solid.humank.genaidemo.infrastructure.observability.metrics;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.stereotype.Component;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.Timer;

/**
 * AOP aspect for automatic metrics collection
 * Instruments application services and domain services with timing metrics
 */
@Aspect
@Component
public class MetricsAspect {

    private final MeterRegistry meterRegistry;
    private final BusinessMetricsCollector businessMetricsCollector;

    public MetricsAspect(MeterRegistry meterRegistry, BusinessMetricsCollector businessMetricsCollector) {
        this.meterRegistry = meterRegistry;
        this.businessMetricsCollector = businessMetricsCollector;
    }

    /**
     * Instrument all application service methods
     */
    @Around("execution(* solid.humank.genaidemo.application..*(..))")
    public Object instrumentApplicationServices(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        Timer.Sample sample = Timer.start(meterRegistry);

        try {
            Object result = joinPoint.proceed();

            // Record successful execution
            sample.stop(Timer.builder("application.service.execution.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "success")
                    .register(meterRegistry));

            // Track specific business metrics
            trackBusinessMetrics(className, methodName, true);

            return result;

        } catch (Exception e) {
            // Record failed execution
            sample.stop(Timer.builder("application.service.execution.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "error")
                    .tag("error.type", e.getClass().getSimpleName())
                    .register(meterRegistry));

            // Track business metrics for failures
            trackBusinessMetrics(className, methodName, false);

            throw e;
        }
    }

    /**
     * Instrument all domain service methods
     */
    @Around("execution(* solid.humank.genaidemo.domain..service..*(..))")
    public Object instrumentDomainServices(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        Timer.Sample sample = Timer.start(meterRegistry);

        try {
            Object result = joinPoint.proceed();

            sample.stop(Timer.builder("domain.service.execution.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "success")
                    .register(meterRegistry));

            return result;

        } catch (Exception e) {
            sample.stop(Timer.builder("domain.service.execution.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "error")
                    .tag("error.type", e.getClass().getSimpleName())
                    .register(meterRegistry));

            throw e;
        }
    }

    /**
     * Instrument repository operations
     */
    @Around("execution(* solid.humank.genaidemo.infrastructure..repository..*(..))")
    public Object instrumentRepositories(ProceedingJoinPoint joinPoint) throws Throwable {
        String className = joinPoint.getTarget().getClass().getSimpleName();
        String methodName = joinPoint.getSignature().getName();

        Timer.Sample sample = Timer.start(meterRegistry);

        try {
            Object result = joinPoint.proceed();

            sample.stop(Timer.builder("repository.operation.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "success")
                    .register(meterRegistry));

            return result;

        } catch (Exception e) {
            sample.stop(Timer.builder("repository.operation.time")
                    .tag("class", className)
                    .tag("method", methodName)
                    .tag("status", "error")
                    .tag("error.type", e.getClass().getSimpleName())
                    .register(meterRegistry));

            throw e;
        }
    }

    /**
     * Track specific business metrics based on method names
     */
    private void trackBusinessMetrics(String className, String methodName, boolean success) {
        // Customer metrics
        if (className.contains("Customer")) {
            if (methodName.contains("register") || methodName.contains("create")) {
                if (success)
                    businessMetricsCollector.incrementCustomerRegistrations();
            }
        }

        // Order metrics
        if (className.contains("Order")) {
            if (methodName.contains("submit") || methodName.contains("create")) {
                if (success)
                    businessMetricsCollector.incrementOrderSubmissions();
            } else if (methodName.contains("complete") || methodName.contains("confirm")) {
                if (success)
                    businessMetricsCollector.incrementOrderCompletions();
            }
        }

        // Payment metrics
        if (className.contains("Payment")) {
            if (methodName.contains("process") || methodName.contains("pay")) {
                if (success) {
                    businessMetricsCollector.incrementPaymentSuccesses();
                } else {
                    businessMetricsCollector.incrementPaymentFailures();
                }
            }
        }

        // Inventory metrics
        if (className.contains("Inventory")) {
            if (methodName.contains("update") || methodName.contains("adjust")) {
                if (success)
                    businessMetricsCollector.incrementInventoryUpdates();
            }
        }
    }
}