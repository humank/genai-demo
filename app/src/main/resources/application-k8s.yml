# Kubernetes Profile Configuration
# This configuration is activated when SPRING_PROFILES_ACTIVE=k8s

spring:
  profiles:
    active: k8s
  
  # PostgreSQL Database Configuration for Kubernetes
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT:5432}/${DB_NAME}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  # JPA Configuration for Kubernetes
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Flyway Configuration for Kubernetes
  flyway:
    enabled: true
    locations: classpath:db/migration/postgresql
    baseline-on-migrate: false
    validate-on-migrate: true

  # Kafka Configuration for Kubernetes (MSK)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: genai-demo-k8s
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 500

# Kubernetes Logging Configuration
logging:
  level:
    root: INFO
    "[solid.humank.genaidemo]": INFO
    org.springframework.web: WARN
    org.springframework.security: WARN
    org.hibernate.SQL: WARN
    io.opentelemetry: INFO
    io.micrometer: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-},%X{correlationId:-}] %logger{36} - %msg%n"

# Kubernetes Tracing Configuration
tracing:
  enabled: true
  sampling:
    ratio: ${TRACING_SAMPLING_RATIO:0.1}  # Configurable via environment variable
  jaeger:
    endpoint: http://localhost:14250  # Not used in Kubernetes
  otlp:
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://adot-collector:4317}

# OpenTelemetry Kubernetes Configuration
otel:
  traces:
    exporter: otlp
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://adot-collector:4317}
      protocol: grpc
      timeout: 10s
      headers:
        x-honeycomb-team: ${HONEYCOMB_API_KEY:}
  resource:
    attributes:
      deployment.environment: k8s
      service.namespace: ${KUBERNETES_NAMESPACE:default}
      cloud.provider: aws
      cloud.platform: aws_eks
      cloud.region: ${AWS_REGION}
      k8s.cluster.name: ${EKS_CLUSTER_NAME}
      k8s.namespace.name: ${KUBERNETES_NAMESPACE:default}
      k8s.pod.name: ${HOSTNAME}
      k8s.node.name: ${K8S_NODE_NAME}

# Management Configuration for Kubernetes
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true  # Enable Kubernetes health probes
  metrics:
    export:
      prometheus:
        enabled: true
        step: 30s
      cloudwatch:
        enabled: true
        namespace: GenAIDemo/K8s
        step: 1m
        batch-size: 20
    tags:
      environment: k8s
      cluster: ${EKS_CLUSTER_NAME}
      namespace: ${KUBERNETES_NAMESPACE:default}
      pod: ${HOSTNAME}
      region: ${AWS_REGION}

# Kubernetes Profile Features
genai-demo:
  profile:
    name: k8s
    description: "Kubernetes profile with PostgreSQL, MSK, and AWS X-Ray"
    features:
      h2-console: false
      debug-logging: false
      in-memory-events: false
      kafka-events: true
      observability-enabled: true
      distributed-tracing: true
  events:
    publisher: kafka
    async: true
    topics:
      customer: genai-demo.customer
      order: genai-demo.order
      payment: genai-demo.payment
      inventory: genai-demo.inventory
  observability:
    tracing:
      enabled: true
      exporter: xray
      sampling-rate: ${TRACING_SAMPLING_RATIO:0.1}
    metrics:
      enabled: true
      export-interval: 30s
      cloudwatch-enabled: true
    logging:
      structured: true
      correlation-enabled: true
      level: INFO

# AWS X-Ray Configuration for Kubernetes
aws:
  xray:
    enabled: true
    daemon-address: ${AWS_XRAY_DAEMON_ADDRESS:xray-daemon:2000}
    context-missing: LOG_ERROR
    plugins:
      - EC2Plugin
      - EKSPlugin
    sampling-rules:
      version: 2
      default:
        fixed_target: 1
        rate: ${TRACING_SAMPLING_RATIO:0.1}
      rules:
        - description: "Customer service sampling"
          service_name: "genai-demo"
          http_method: "*"
          url_path: "/api/customers/*"
          fixed_target: 2
          rate: 0.2
        - description: "Order service sampling"
          service_name: "genai-demo"
          http_method: "*"
          url_path: "/api/orders/*"
          fixed_target: 2
          rate: 0.2
        - description: "Health check sampling"
          service_name: "genai-demo"
          http_method: "GET"
          url_path: "/actuator/health"
          fixed_target: 0
          rate: 0.0