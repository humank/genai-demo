# Kubernetes Profile Configuration
# Activated by: SPRING_PROFILES_ACTIVE=kubernetes
# Features: EKS-optimized settings, service discovery, health checks

spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT:5432}/${DB_NAME}
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      maximum-pool-size: ${DB_POOL_SIZE:15}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000

  # JPA Configuration for Kubernetes
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Flyway Configuration for Kubernetes
  flyway:
    enabled: true
    locations: classpath:db/migration/postgresql
    baseline-on-migrate: false
    validate-on-migrate: true
    out-of-order: false

  # Kafka Configuration for Kubernetes (Amazon MSK)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
      properties:
        enable.idempotence: true
        max.in.flight.requests.per.connection: 5
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: ${KAFKA_CONSUMER_GROUP_ID:genai-demo-consumer}
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "solid.humank.genaidemo.domain.common.event"
        security.protocol: ${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
    
# Kubernetes-optimized logging (JSON for Fluent Bit)
logging:
  level:
    org.springframework.web: INFO
    org.hibernate.SQL: WARN
    solid.humank.genaidemo: INFO
    solid.humank.genaidemo.infrastructure.event: INFO
    org.springframework.kafka: INFO
  pattern:
    console: '{"timestamp":"%d{yyyy-MM-dd HH:mm:ss.SSS}","level":"%-5level","thread":"%thread","logger":"%logger{36}","correlationId":"%X{correlationId:-}","traceId":"%X{traceId:-}","spanId":"%X{spanId:-}","pod":"%X{pod:-}","node":"%X{node:-}","message":"%msg"}%n'
    
# Kubernetes server configuration
server:
  port: ${SERVER_PORT:8080}
  error:
    include-stacktrace: never
    include-message: never
    whitelabel:
      enabled: false
  tomcat:
    max-threads: ${SERVER_TOMCAT_MAX_THREADS:200}
    min-spare-threads: ${SERVER_TOMCAT_MIN_SPARE_THREADS:10}
  shutdown: graceful
      
# Kubernetes management endpoints (for probes and monitoring)
management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,readiness,liveness
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    readiness:
      enabled: true
    liveness:
      enabled: true
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  metrics:
    export:
      cloudwatch:
        enabled: true
        namespace: GenAIDemo/EKS
        batch-size: 20
      prometheus:
        enabled: true
        
# AWS Observability Configuration for EKS
observability:
  tracing:
    enabled: true
    sampler:
      probability: ${TRACING_SAMPLE_RATE:0.1}
    aws:
      xray:
        enabled: true
        daemon-address: ${AWS_XRAY_DAEMON_ADDRESS:xray-daemon:2000}
  metrics:
    enabled: true
    export:
      cloudwatch:
        enabled: true
        namespace: GenAIDemo/EKS
      prometheus:
        enabled: true
  logging:
    structured: true
    mdc:
      correlation-id: true
      trace-id: true
      span-id: true
      pod-name: ${HOSTNAME:unknown}
      node-name: ${NODE_NAME:unknown}
      
# Profile validation
genai-demo:
  profile:
    name: kubernetes
    description: "EKS deployment with PostgreSQL, MSK, and comprehensive observability"
    features:
      h2-console: false
      debug-logging: false
      kafka-events: true
      in-memory-events: false
      observability-enabled: true
      kubernetes-optimized: true
      
  # Event publishing strategy for Kubernetes
  events:
    publisher:
      type: kafka
      async: true
      retry:
        max-attempts: 3
        backoff-delay: 1000
      dead-letter:
        enabled: true
        topic: genai-demo.dead-letter
        
  # Database configuration
  database:
    type: postgresql
    migration-path: postgresql
    
# Security configuration
security:
  require-ssl: ${SECURITY_REQUIRE_SSL:true}
  
# AWS Configuration
aws:
  region: ${AWS_REGION:ap-northeast-1}
  credentials:
    use-instance-profile: true
    
# Kubernetes-specific configuration
kubernetes:
  namespace: ${KUBERNETES_NAMESPACE:default}
  service-name: ${KUBERNETES_SERVICE_NAME:genai-demo}
  pod-name: ${HOSTNAME:unknown}
  node-name: ${NODE_NAME:unknown}
  
# Graceful shutdown configuration
spring:
  lifecycle:
    timeout-per-shutdown-phase: 30s