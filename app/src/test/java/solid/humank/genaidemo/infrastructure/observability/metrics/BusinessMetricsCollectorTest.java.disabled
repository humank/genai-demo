package solid.humank.genaidemo.infrastructure.observability.metrics;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import io.micrometer.core.instrument.MeterRegistry;
import io.micrometer.core.instrument.simple.SimpleMeterRegistry;

@DisplayName("Business Metrics Collector Tests")
class BusinessMetricsCollectorTest {

    private MeterRegistry meterRegistry;
    private BusinessMetricsCollector businessMetricsCollector;

    @BeforeEach
    void setUp() {
        meterRegistry = new SimpleMeterRegistry();
        businessMetricsCollector = new BusinessMetricsCollector(meterRegistry);
    }

    @Test
    @DisplayName("Should increment customer registrations counter")
    void shouldIncrementCustomerRegistrations() {
        // When
        businessMetricsCollector.incrementCustomerRegistrations();
        businessMetricsCollector.incrementCustomerRegistrations();

        // Then
        double count = meterRegistry.counter("business.customer.registrations").count();
        assertThat(count).isEqualTo(2.0);
    }

    @Test
    @DisplayName("Should increment order submissions counter")
    void shouldIncrementOrderSubmissions() {
        // When
        businessMetricsCollector.incrementOrderSubmissions();

        // Then
        double count = meterRegistry.counter("business.order.submissions").count();
        assertThat(count).isEqualTo(1.0);
    }

    @Test
    @DisplayName("Should track payment success and failure metrics")
    void shouldTrackPaymentMetrics() {
        // When
        businessMetricsCollector.incrementPaymentSuccesses();
        businessMetricsCollector.incrementPaymentSuccesses();
        businessMetricsCollector.incrementPaymentFailures();

        // Then
        double successCount = meterRegistry.counter("business.payment.successes").count();
        double failureCount = meterRegistry.counter("business.payment.failures").count();

        assertThat(successCount).isEqualTo(2.0);
        assertThat(failureCount).isEqualTo(1.0);
    }

    @Test
    @DisplayName("Should update active customers gauge")
    void shouldUpdateActiveCustomersGauge() {
        // When
        businessMetricsCollector.setActiveCustomers(100);

        // Then
        double gaugeValue = meterRegistry.gauge("business.customer.active").value();
        assertThat(gaugeValue).isEqualTo(100.0);
    }

    @Test
    @DisplayName("Should increment and decrement active customers")
    void shouldIncrementAndDecrementActiveCustomers() {
        // Given
        businessMetricsCollector.setActiveCustomers(50);

        // When
        businessMetricsCollector.incrementActiveCustomers();
        businessMetricsCollector.incrementActiveCustomers();
        businessMetricsCollector.decrementActiveCustomers();

        // Then
        double gaugeValue = meterRegistry.gauge("business.customer.active").value();
        assertThat(gaugeValue).isEqualTo(51.0);
    }

    @Test
    @DisplayName("Should track pending orders gauge")
    void shouldTrackPendingOrders() {
        // When
        businessMetricsCollector.setPendingOrders(25);
        businessMetricsCollector.incrementPendingOrders();

        // Then
        double gaugeValue = meterRegistry.gauge("business.order.pending").value();
        assertThat(gaugeValue).isEqualTo(26.0);
    }

    @Test
    @DisplayName("Should track low stock items gauge")
    void shouldTrackLowStockItems() {
        // When
        businessMetricsCollector.setLowStockItems(5);

        // Then
        double gaugeValue = meterRegistry.gauge("business.inventory.low_stock").value();
        assertThat(gaugeValue).isEqualTo(5.0);
    }

    @Test
    @DisplayName("Should record order processing time")
    void shouldRecordOrderProcessingTime() {
        // Given
        var sample = businessMetricsCollector.startOrderProcessingTimer();

        // When
        try {
            Thread.sleep(10); // Simulate processing time
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        businessMetricsCollector.recordOrderProcessingTime(sample);

        // Then
        double count = meterRegistry.timer("business.order.processing.time").count();
        assertThat(count).isEqualTo(1.0);

        double totalTime = meterRegistry.timer("business.order.processing.time")
                .totalTime(java.util.concurrent.TimeUnit.MILLISECONDS);
        assertThat(totalTime).isGreaterThan(0);
    }

    @Test
    @DisplayName("Should record payment processing time")
    void shouldRecordPaymentProcessingTime() {
        // Given
        var sample = businessMetricsCollector.startPaymentProcessingTimer();

        // When
        try {
            Thread.sleep(5); // Simulate processing time
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        businessMetricsCollector.recordPaymentProcessingTime(sample);

        // Then
        double count = meterRegistry.timer("business.payment.processing.time").count();
        assertThat(count).isEqualTo(1.0);
    }

    @Test
    @DisplayName("Should record inventory check time")
    void shouldRecordInventoryCheckTime() {
        // Given
        var sample = businessMetricsCollector.startInventoryCheckTimer();

        // When
        try {
            Thread.sleep(3); // Simulate processing time
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        businessMetricsCollector.recordInventoryCheckTime(sample);

        // Then
        double count = meterRegistry.timer("business.inventory.check.time").count();
        assertThat(count).isEqualTo(1.0);
    }
}