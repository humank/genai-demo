package solid.humank.genaidemo.integration;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.TestPropertySource;

import solid.humank.genaidemo.testutils.annotations.IntegrationTest;

/**
 * Simple end-to-end integration test to validate basic functionality
 */
@IntegrationTest
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@ActiveProfiles("test")
@TestPropertySource(properties = {
    "spring.flyway.enabled=false",
    "spring.jpa.hibernate.ddl-auto=create-drop",
    "spring.main.lazy-initialization=true",
    "observability.enabled=true",
    "management.endpoints.web.exposure.include=health,info,metrics",
    "logging.level.root=ERROR"
})
public class SimpleEndToEndTest {

        @LocalServerPort
        private int port;

        @Autowired
        private TestRestTemplate restTemplate;

        @Test
        void shouldValidateApplicationHealth() {
                // Test basic application health
                ResponseEntity<String> healthResponse = restTemplate.getForEntity(
                                "http://localhost:" + port + "/actuator/health", String.class);

                assertThat(healthResponse.getStatusCode().is2xxSuccessful()).isTrue();
                assertThat(healthResponse.getBody()).contains("\"status\":\"UP\"");
        }

        @Test
        void shouldValidateActuatorEndpoints() {
                // Test actuator info endpoint
                ResponseEntity<String> infoResponse = restTemplate.getForEntity(
                                "http://localhost:" + port + "/actuator/info", String.class);

                assertThat(infoResponse.getStatusCode().is2xxSuccessful()).isTrue();
        }

        @Test
        void shouldValidateMetricsEndpoint() {
                // Test metrics endpoint
                ResponseEntity<String> metricsResponse = restTemplate.getForEntity(
                                "http://localhost:" + port + "/actuator/metrics", String.class);

                assertThat(metricsResponse.getStatusCode().is2xxSuccessful()).isTrue();
                // Check for metrics that are actually available in the test environment
                assertThat(metricsResponse.getBody()).contains("names");
                assertThat(metricsResponse.getBody()).contains("application.ready.time");
        }
}