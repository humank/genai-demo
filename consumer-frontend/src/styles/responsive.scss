// Modern Responsive Design System
// Mobile-first approach with modern breakpoints

// === Breakpoint System ===

$breakpoints: (
    'xs': 0,
    'sm': 576px,
    'md': 768px,
    'lg': 992px,
    'xl': 1200px,
    '2xl': 1400px
);

// Responsive Mixins
@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
        $value: map-get($breakpoints, $breakpoint);

        @if $value ==0 {
            @content;
        }

        @else {
            @media (min-width: $value) {
                @content;
            }
        }
    }

    @else {
        @warn "Unknown breakpoint: #{$breakpoint}";
    }
}

@mixin respond-between($min, $max) {
    $min-value: map-get($breakpoints, $min);
    $max-value: map-get($breakpoints, $max);

    @if $min-value and $max-value {
        @media (min-width: $min-value) and (max-width: $max-value - 1px) {
            @content;
        }
    }
}

@mixin respond-below($breakpoint) {
    $value: map-get($breakpoints, $breakpoint);

    @if $value {
        @media (max-width: $value - 1px) {
            @content;
        }
    }
}

// === Container System ===

.container {
    width: 100%;
    margin-left: auto;
    margin-right: auto;
    padding-left: var(--spacing-4);
    padding-right: var(--spacing-4);

    @include respond-to('sm') {
        max-width: var(--container-sm);
        padding-left: var(--spacing-6);
        padding-right: var(--spacing-6);
    }

    @include respond-to('md') {
        max-width: var(--container-md);
    }

    @include respond-to('lg') {
        max-width: var(--container-lg);
    }

    @include respond-to('xl') {
        max-width: var(--container-xl);
    }

    @include respond-to('2xl') {
        max-width: var(--container-2xl);
    }
}

.container-fluid {
    width: 100%;
    padding-left: var(--spacing-4);
    padding-right: var(--spacing-4);

    @include respond-to('sm') {
        padding-left: var(--spacing-6);
        padding-right: var(--spacing-6);
    }
}

// === Grid System ===

.grid {
    display: grid;
    gap: var(--spacing-4);

    @include respond-to('sm') {
        gap: var(--spacing-6);
    }
}

// Auto-fit grids with minimum column width
.grid-auto-fit {
    display: grid;
    gap: var(--spacing-4);

    &.grid-auto-fit-xs {
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }

    &.grid-auto-fit-sm {
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    }

    &.grid-auto-fit-md {
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }

    &.grid-auto-fit-lg {
        grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    }
}

// Responsive grid columns
.grid-cols-1 {
    grid-template-columns: repeat(1, 1fr);
}

.grid-cols-2 {
    grid-template-columns: repeat(2, 1fr);
}

.grid-cols-3 {
    grid-template-columns: repeat(3, 1fr);
}

.grid-cols-4 {
    grid-template-columns: repeat(4, 1fr);
}

.grid-cols-5 {
    grid-template-columns: repeat(5, 1fr);
}

.grid-cols-6 {
    grid-template-columns: repeat(6, 1fr);
}

@include respond-to('sm') {
    .sm\:grid-cols-1 {
        grid-template-columns: repeat(1, 1fr);
    }

    .sm\:grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
    }

    .sm\:grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
    }

    .sm\:grid-cols-4 {
        grid-template-columns: repeat(4, 1fr);
    }

    .sm\:grid-cols-5 {
        grid-template-columns: repeat(5, 1fr);
    }

    .sm\:grid-cols-6 {
        grid-template-columns: repeat(6, 1fr);
    }
}

@include respond-to('md') {
    .md\:grid-cols-1 {
        grid-template-columns: repeat(1, 1fr);
    }

    .md\:grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
    }

    .md\:grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
    }

    .md\:grid-cols-4 {
        grid-template-columns: repeat(4, 1fr);
    }

    .md\:grid-cols-5 {
        grid-template-columns: repeat(5, 1fr);
    }

    .md\:grid-cols-6 {
        grid-template-columns: repeat(6, 1fr);
    }
}

@include respond-to('lg') {
    .lg\:grid-cols-1 {
        grid-template-columns: repeat(1, 1fr);
    }

    .lg\:grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
    }

    .lg\:grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
    }

    .lg\:grid-cols-4 {
        grid-template-columns: repeat(4, 1fr);
    }

    .lg\:grid-cols-5 {
        grid-template-columns: repeat(5, 1fr);
    }

    .lg\:grid-cols-6 {
        grid-template-columns: repeat(6, 1fr);
    }
}

@include respond-to('xl') {
    .xl\:grid-cols-1 {
        grid-template-columns: repeat(1, 1fr);
    }

    .xl\:grid-cols-2 {
        grid-template-columns: repeat(2, 1fr);
    }

    .xl\:grid-cols-3 {
        grid-template-columns: repeat(3, 1fr);
    }

    .xl\:grid-cols-4 {
        grid-template-columns: repeat(4, 1fr);
    }

    .xl\:grid-cols-5 {
        grid-template-columns: repeat(5, 1fr);
    }

    .xl\:grid-cols-6 {
        grid-template-columns: repeat(6, 1fr);
    }
}

// === Product Grid System ===

.products-grid {
    display: grid;
    gap: var(--spacing-4);
    grid-template-columns: 1fr;

    @include respond-to('sm') {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-6);
    }

    @include respond-to('lg') {
        grid-template-columns: repeat(3, 1fr);
    }

    @include respond-to('xl') {
        grid-template-columns: repeat(4, 1fr);
    }

    @include respond-to('2xl') {
        grid-template-columns: repeat(5, 1fr);
    }
}

.categories-grid {
    display: grid;
    gap: var(--spacing-4);
    grid-template-columns: repeat(2, 1fr);

    @include respond-to('sm') {
        grid-template-columns: repeat(3, 1fr);
    }

    @include respond-to('md') {
        grid-template-columns: repeat(4, 1fr);
    }

    @include respond-to('lg') {
        grid-template-columns: repeat(6, 1fr);
    }

    @include respond-to('xl') {
        grid-template-columns: repeat(8, 1fr);
    }
}

.features-grid {
    display: grid;
    gap: var(--spacing-6);
    grid-template-columns: 1fr;

    @include respond-to('md') {
        grid-template-columns: repeat(2, 1fr);
    }

    @include respond-to('lg') {
        grid-template-columns: repeat(3, 1fr);
    }
}

// === Flexbox Utilities ===

.flex {
    display: flex;
}

.flex-col {
    flex-direction: column;
}

.flex-wrap {
    flex-wrap: wrap;
}

.items-center {
    align-items: center;
}

.items-start {
    align-items: flex-start;
}

.items-end {
    align-items: flex-end;
}

.justify-center {
    justify-content: center;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

.justify-evenly {
    justify-content: space-evenly;
}

// Responsive flex utilities
@include respond-to('sm') {
    .sm\:flex {
        display: flex;
    }

    .sm\:flex-col {
        flex-direction: column;
    }

    .sm\:flex-row {
        flex-direction: row;
    }

    .sm\:items-center {
        align-items: center;
    }

    .sm\:justify-center {
        justify-content: center;
    }

    .sm\:justify-between {
        justify-content: space-between;
    }
}

@include respond-to('md') {
    .md\:flex {
        display: flex;
    }

    .md\:flex-col {
        flex-direction: column;
    }

    .md\:flex-row {
        flex-direction: row;
    }

    .md\:items-center {
        align-items: center;
    }

    .md\:justify-center {
        justify-content: center;
    }

    .md\:justify-between {
        justify-content: space-between;
    }
}

@include respond-to('lg') {
    .lg\:flex {
        display: flex;
    }

    .lg\:flex-col {
        flex-direction: column;
    }

    .lg\:flex-row {
        flex-direction: row;
    }

    .lg\:items-center {
        align-items: center;
    }

    .lg\:justify-center {
        justify-content: center;
    }

    .lg\:justify-between {
        justify-content: space-between;
    }
}

// === Spacing Utilities ===

// Responsive padding
.p-0 {
    padding: 0;
}

.p-1 {
    padding: var(--spacing-1);
}

.p-2 {
    padding: var(--spacing-2);
}

.p-3 {
    padding: var(--spacing-3);
}

.p-4 {
    padding: var(--spacing-4);
}

.p-6 {
    padding: var(--spacing-6);
}

.p-8 {
    padding: var(--spacing-8);
}

@include respond-to('sm') {
    .sm\:p-0 {
        padding: 0;
    }

    .sm\:p-1 {
        padding: var(--spacing-1);
    }

    .sm\:p-2 {
        padding: var(--spacing-2);
    }

    .sm\:p-3 {
        padding: var(--spacing-3);
    }

    .sm\:p-4 {
        padding: var(--spacing-4);
    }

    .sm\:p-6 {
        padding: var(--spacing-6);
    }

    .sm\:p-8 {
        padding: var(--spacing-8);
    }
}

@include respond-to('md') {
    .md\:p-0 {
        padding: 0;
    }

    .md\:p-1 {
        padding: var(--spacing-1);
    }

    .md\:p-2 {
        padding: var(--spacing-2);
    }

    .md\:p-3 {
        padding: var(--spacing-3);
    }

    .md\:p-4 {
        padding: var(--spacing-4);
    }

    .md\:p-6 {
        padding: var(--spacing-6);
    }

    .md\:p-8 {
        padding: var(--spacing-8);
    }
}

// Responsive margin
.m-0 {
    margin: 0;
}

.m-1 {
    margin: var(--spacing-1);
}

.m-2 {
    margin: var(--spacing-2);
}

.m-3 {
    margin: var(--spacing-3);
}

.m-4 {
    margin: var(--spacing-4);
}

.m-6 {
    margin: var(--spacing-6);
}

.m-8 {
    margin: var(--spacing-8);
}

// Auto margins
.mx-auto {
    margin-left: auto;
    margin-right: auto;
}

.ml-auto {
    margin-left: auto;
}

.mr-auto {
    margin-right: auto;
}

// === Typography Responsive ===

.text-xs {
    font-size: var(--font-size-xs);
}

.text-sm {
    font-size: var(--font-size-sm);
}

.text-base {
    font-size: var(--font-size-base);
}

.text-lg {
    font-size: var(--font-size-lg);
}

.text-xl {
    font-size: var(--font-size-xl);
}

.text-2xl {
    font-size: var(--font-size-2xl);
}

.text-3xl {
    font-size: var(--font-size-3xl);
}

.text-4xl {
    font-size: var(--font-size-4xl);
}

@include respond-to('sm') {
    .sm\:text-xs {
        font-size: var(--font-size-xs);
    }

    .sm\:text-sm {
        font-size: var(--font-size-sm);
    }

    .sm\:text-base {
        font-size: var(--font-size-base);
    }

    .sm\:text-lg {
        font-size: var(--font-size-lg);
    }

    .sm\:text-xl {
        font-size: var(--font-size-xl);
    }

    .sm\:text-2xl {
        font-size: var(--font-size-2xl);
    }

    .sm\:text-3xl {
        font-size: var(--font-size-3xl);
    }

    .sm\:text-4xl {
        font-size: var(--font-size-4xl);
    }
}

@include respond-to('md') {
    .md\:text-xs {
        font-size: var(--font-size-xs);
    }

    .md\:text-sm {
        font-size: var(--font-size-sm);
    }

    .md\:text-base {
        font-size: var(--font-size-base);
    }

    .md\:text-lg {
        font-size: var(--font-size-lg);
    }

    .md\:text-xl {
        font-size: var(--font-size-xl);
    }

    .md\:text-2xl {
        font-size: var(--font-size-2xl);
    }

    .md\:text-3xl {
        font-size: var(--font-size-3xl);
    }

    .md\:text-4xl {
        font-size: var(--font-size-4xl);
    }
}

@include respond-to('lg') {
    .lg\:text-xs {
        font-size: var(--font-size-xs);
    }

    .lg\:text-sm {
        font-size: var(--font-size-sm);
    }

    .lg\:text-base {
        font-size: var(--font-size-base);
    }

    .lg\:text-lg {
        font-size: var(--font-size-lg);
    }

    .lg\:text-xl {
        font-size: var(--font-size-xl);
    }

    .lg\:text-2xl {
        font-size: var(--font-size-2xl);
    }

    .lg\:text-3xl {
        font-size: var(--font-size-3xl);
    }

    .lg\:text-4xl {
        font-size: var(--font-size-4xl);
    }

    .lg\:text-5xl {
        font-size: var(--font-size-5xl);
    }
}

// === Display Utilities ===

.hidden {
    display: none;
}

.block {
    display: block;
}

.inline {
    display: inline;
}

.inline-block {
    display: inline-block;
}

@include respond-to('sm') {
    .sm\:hidden {
        display: none;
    }

    .sm\:block {
        display: block;
    }

    .sm\:inline {
        display: inline;
    }

    .sm\:inline-block {
        display: inline-block;
    }
}

@include respond-to('md') {
    .md\:hidden {
        display: none;
    }

    .md\:block {
        display: block;
    }

    .md\:inline {
        display: inline;
    }

    .md\:inline-block {
        display: inline-block;
    }
}

@include respond-to('lg') {
    .lg\:hidden {
        display: none;
    }

    .lg\:block {
        display: block;
    }

    .lg\:inline {
        display: inline;
    }

    .lg\:inline-block {
        display: inline-block;
    }
}

// === Width Utilities ===

.w-full {
    width: 100%;
}

.w-auto {
    width: auto;
}

.w-fit {
    width: fit-content;
}

.max-w-xs {
    max-width: 20rem;
}

.max-w-sm {
    max-width: 24rem;
}

.max-w-md {
    max-width: 28rem;
}

.max-w-lg {
    max-width: 32rem;
}

.max-w-xl {
    max-width: 36rem;
}

.max-w-2xl {
    max-width: 42rem;
}

.max-w-3xl {
    max-width: 48rem;
}

.max-w-4xl {
    max-width: 56rem;
}

.max-w-5xl {
    max-width: 64rem;
}

.max-w-6xl {
    max-width: 72rem;
}

.max-w-7xl {
    max-width: 80rem;
}

.max-w-full {
    max-width: 100%;
}

// === Height Utilities ===

.h-auto {
    height: auto;
}

.h-full {
    height: 100%;
}

.h-screen {
    height: 100vh;
}

.min-h-screen {
    min-height: 100vh;
}

.min-h-full {
    min-height: 100%;
}

// === Position Utilities ===

.relative {
    position: relative;
}

.absolute {
    position: absolute;
}

.fixed {
    position: fixed;
}

.sticky {
    position: sticky;
}

// === Overflow Utilities ===

.overflow-hidden {
    overflow: hidden;
}

.overflow-auto {
    overflow: auto;
}

.overflow-scroll {
    overflow: scroll;
}

.overflow-x-hidden {
    overflow-x: hidden;
}

.overflow-x-auto {
    overflow-x: auto;
}

.overflow-x-scroll {
    overflow-x: scroll;
}

.overflow-y-hidden {
    overflow-y: hidden;
}

.overflow-y-auto {
    overflow-y: auto;
}

.overflow-y-scroll {
    overflow-y: scroll;
}

// === Text Alignment ===

.text-left {
    text-align: left;
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

.text-justify {
    text-align: justify;
}

@include respond-to('sm') {
    .sm\:text-left {
        text-align: left;
    }

    .sm\:text-center {
        text-align: center;
    }

    .sm\:text-right {
        text-align: right;
    }
}

@include respond-to('md') {
    .md\:text-left {
        text-align: left;
    }

    .md\:text-center {
        text-align: center;
    }

    .md\:text-right {
        text-align: right;
    }
}

@include respond-to('lg') {
    .lg\:text-left {
        text-align: left;
    }

    .lg\:text-center {
        text-align: center;
    }

    .lg\:text-right {
        text-align: right;
    }
}

// === Mobile-Specific Utilities ===

@include respond-below('md') {
    .mobile-only {
        display: block;
    }

    .desktop-only {
        display: none;
    }

    // Mobile-optimized spacing
    .mobile-p-4 {
        padding: var(--spacing-4);
    }

    .mobile-px-4 {
        padding-left: var(--spacing-4);
        padding-right: var(--spacing-4);
    }

    .mobile-py-4 {
        padding-top: var(--spacing-4);
        padding-bottom: var(--spacing-4);
    }

    // Mobile-optimized text sizes
    .mobile-text-sm {
        font-size: var(--font-size-sm);
    }

    .mobile-text-base {
        font-size: var(--font-size-base);
    }

    .mobile-text-lg {
        font-size: var(--font-size-lg);
    }
}

// === Desktop-Specific Utilities ===

@include respond-to('md') {
    .desktop-only {
        display: block;
    }

    .mobile-only {
        display: none;
    }
}

// === Touch-Friendly Utilities ===

@media (hover: none) and (pointer: coarse) {
    .touch-friendly {
        min-height: 44px;
        min-width: 44px;
    }

    .btn {
        min-height: 44px;
        padding: var(--spacing-3) var(--spacing-6);
    }

    .quick-action-btn {
        min-width: 44px;
        min-height: 44px;
    }
}

// === Print Styles ===

@media print {
    .no-print {
        display: none !important;
    }

    .print-only {
        display: block !important;
    }

    * {
        background: transparent !important;
        color: black !important;
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    .container {
        max-width: none;
        padding: 0;
    }
}

// === Aspect Ratio Utilities ===

.aspect-square {
    aspect-ratio: 1 / 1;
}

.aspect-video {
    aspect-ratio: 16 / 9;
}

.aspect-photo {
    aspect-ratio: 4 / 3;
}

.aspect-portrait {
    aspect-ratio: 3 / 4;
}

// === Modern CSS Features ===

// Container Queries (for modern browsers)
@supports (container-type: inline-size) {
    .container-query {
        container-type: inline-size;
    }

    @container (min-width: 300px) {
        .cq-sm {
            display: block;
        }
    }

    @container (min-width: 500px) {
        .cq-md {
            display: block;
        }
    }

    @container (min-width: 700px) {
        .cq-lg {
            display: block;
        }
    }
}

// Subgrid support (for modern browsers)
@supports (grid-template-rows: subgrid) {
    .subgrid {
        display: grid;
        grid-template-rows: subgrid;
    }
}