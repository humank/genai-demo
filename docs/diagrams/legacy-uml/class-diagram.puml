@startuml 訂單系統類別圖
skinparam classAttributeIconSize 0

package "domain.order.model.aggregate" {
  class Order {
    -OrderId id
    -List<OrderItem> items
    -OrderStatus status
    -Money totalAmount
    -Money discountAmount
    -String shippingAddress
    -LocalDateTime createdAt
    -LocalDateTime updatedAt
    +addItem(OrderItem item)
    +removeItem(String itemId)
    +updateStatus(OrderStatus status)
    +calculateTotal()
    +applyDiscount(Money amount)
    +submit()
    +cancel()
  }
}

package "domain.common.valueobject" {
  class OrderItem {
    -String itemId
    -String productId
    -String productName
    -int quantity
    -Money unitPrice
    +calculateSubtotal()
  }

  class Money {
    -BigDecimal amount
    -Currency currency
    +add(Money other)
    +subtract(Money other)
    +multiply(int quantity)
    +multiply(double multiplier)
    +divide(int divisor)
    +isGreaterThan(Money other)
    +{static} of(BigDecimal amount, String currencyCode)
    +{static} of(double amount, String currencyCode)
    +{static} twd(double amount)
    +{static} zero()
  }

  enum OrderStatus {
    CREATED
    PENDING
    CONFIRMED
    PROCESSING
    SHIPPED
    DELIVERED
    COMPLETED
    CANCELLED
  }

  class OrderId {
    -UUID id
    +toString()
  }
}

package "application.order.service" {
  class OrderApplicationService {
    -OrderFactory orderFactory
    -OrderRepository orderRepository
    -PaymentServicePort paymentService
    -LogisticsServicePort logisticsService
    -OrderMapper orderMapper
    +createOrder(CreateOrderCommand cmd)
    +addOrderItem(AddOrderItemCommand cmd)
    +processOrder(OrderId orderId)
  }
}

package "application.order.mapper" {
  class OrderMapper {
    +toDto(Order order)
    +fromCommand(CreateOrderCommand cmd)
  }
}

package "domain.order.model.factory" {
  class OrderFactory {
    +createOrder(String customerId, String shippingAddress)
    +createOrderItem(String productId, String productName, int quantity, Money unitPrice)
  }
}

package "domain.common.event" {
  interface DomainEvent {
    +getEventId()
    +getTimestamp()
  }
}

package "domain.order.model.events" {
  class OrderCreatedEvent {
    -OrderId orderId
    -String customerId
    -LocalDateTime createdAt
  }

  class OrderItemAddedEvent {
    -OrderId orderId
    -String itemId
    -String productId
    -int quantity
    -Money unitPrice
    -LocalDateTime addedAt
  }
}

package "domain.payment.model.aggregate" {
  class Payment {
    -PaymentId paymentId
    -OrderId orderId
    -Money amount
    -PaymentMethod method
    -PaymentStatus status
    -String transactionId
    -String failureReason
    -LocalDateTime createdAt
    -LocalDateTime updatedAt
    +complete(String transactionId)
    +fail(String reason)
    +refund()
    +retry()
  }
}

package "domain.pricing.model.aggregate" {
  class PricingRule {
    -PriceId priceId
    -ProductId productId
    -PromotionId promotionId
    -Money finalPrice
    -double discountPercentage
    -Money discountAmount
    -LocalDateTime effectiveFrom
    -LocalDateTime effectiveTo
    -boolean isActive
    -List<CommissionRate> commissionRates
    -ProductCategory productCategory
    +isValidNow()
    +calculateCommission(boolean isEventPromotion)
    +updateCommissionRate(int normalRate, int eventRate)
    +deactivate()
    +activate()
  }
}

package "domain.delivery.model.aggregate" {
  class Delivery {
    -DeliveryId id
    -OrderId orderId
    -String shippingAddress
    -DeliveryStatus status
    -String deliveryPersonId
    -String deliveryPersonName
    -String deliveryPersonContact
    -LocalDateTime estimatedDeliveryTime
    -LocalDateTime actualDeliveryTime
    -String trackingNumber
    -String failureReason
    -boolean redeliveryScheduled
    -LocalDateTime createdAt
    -LocalDateTime updatedAt
    +allocateResources(String deliveryPersonId, String deliveryPersonName, String deliveryPersonContact, LocalDateTime estimatedDeliveryTime)
    +updateAddress(String newAddress)
    +markAsDelivered()
    +markAsFailed(String reason)
    +markAsRefused(String reason)
    +markAsDelayed(String reason, LocalDateTime newEstimatedDeliveryTime)
    +cancel()
    +scheduleRedelivery()
    +rearrange()
  }
}

package "domain.common.valueobject" {
  enum PaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
  }
  
  enum PaymentMethod {
    CREDIT_CARD
    DEBIT_CARD
    BANK_TRANSFER
    DIGITAL_WALLET
    CASH_ON_DELIVERY
  }
  
  enum ProductCategory {
    ELECTRONICS
    FASHION
    GROCERIES
    HOME_APPLIANCES
    BEAUTY
    SPORTS
    BOOKS
    TOYS
    AUTOMOTIVE
    HEALTH
    GENERAL
  }
  
  enum DeliveryStatus {
    PENDING_SHIPMENT
    IN_TRANSIT
    DELIVERED
    DELAYED
    DELIVERY_FAILED
    REFUSED
    CANCELLED
  }
}

package "domain.pricing.model.entity" {
  class CommissionRate {
    -ProductCategory category
    -int normalRate
    -int eventRate
    +getNormalRate()
    +getEventRate()
    +setNormalRate(int rate)
    +setEventRate(int rate)
  }
}

Order "1" *--> "*" OrderItem : contains
Order --> OrderStatus
Order --> Money : totalAmount
Order --> Money : discountAmount
Order --> OrderId
OrderItem --> Money : unitPrice
OrderApplicationService --> OrderFactory
OrderApplicationService --> Order
OrderApplicationService --> OrderMapper
Order ..> OrderCreatedEvent : publishes
Order ..> OrderItemAddedEvent : publishes
OrderCreatedEvent ..|> DomainEvent
OrderItemAddedEvent ..|> DomainEvent
Payment --> PaymentStatus
Payment --> PaymentMethod
Payment --> Money : amount
Payment --> OrderId : references
PricingRule "1" *--> "*" CommissionRate : contains
PricingRule --> ProductCategory
PricingRule --> Money : finalPrice
PricingRule --> Money : discountAmount
Delivery --> DeliveryStatus
Delivery --> OrderId : references

note right of Order : "訂單聚合根"
note right of OrderStatus : "訂單狀態"
note right of DomainEvent : "領域事件介面"
note right of Payment : "支付聚合根"
note right of PricingRule : "定價規則聚合根"
note right of Delivery : "配送聚合根"

@enduml