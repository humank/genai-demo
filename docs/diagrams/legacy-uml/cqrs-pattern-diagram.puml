@startuml CQRS Pattern Diagram

' C4 Model Definitions
!define LAYOUT_WITH_LEGEND
!define SHOW_PERSON_PORTRAIT

' C4 Element Styles
!define C4_COMPONENT_FONT_COLOR #000000
!define C4_COMPONENT_BG_COLOR #85BBF0
!define C4_CONTAINER_FONT_COLOR #000000
!define C4_CONTAINER_BG_COLOR #438DD5
!define C4_SYSTEM_FONT_COLOR #FFFFFF
!define C4_SYSTEM_BG_COLOR #1168BD
!define C4_PERSON_FONT_COLOR #FFFFFF
!define C4_PERSON_BG_COLOR #08427B
!define C4_BOUNDARY_COLOR #444444

' C4 Element Macros
!define Person(e_alias, e_label, e_descr) actor "==e_label\n\ne_descr" as e_alias
!define System_Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Container_Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Component(e_alias, e_label, e_techn, e_descr) rectangle "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<component>> as e_alias
!define ComponentDb(e_alias, e_label, e_techn, e_descr) database "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<database>> as e_alias
!define System_Ext(e_alias, e_label, e_descr) rectangle "==e_label\n\ne_descr" <<external_system>> as e_alias
!define Rel(e_from, e_to, e_label, e_techn) e_from --> e_to : "e_label\n//<size:10>[e_techn]</size>//"

' Styling
skinparam rectangle {
    FontColor<<component>> C4_COMPONENT_FONT_COLOR
    BackgroundColor<<component>> C4_COMPONENT_BG_COLOR
    FontColor<<boundary>> #444444
    BorderColor<<boundary>> C4_BOUNDARY_COLOR
    BorderStyle<<boundary>> dashed
    FontColor<<external_system>> C4_SYSTEM_FONT_COLOR
    BackgroundColor<<external_system>> #999999
}

skinparam database {
    BackgroundColor C4_COMPONENT_BG_COLOR
}

skinparam actor {
    BackgroundColor C4_PERSON_BG_COLOR
    FontColor C4_PERSON_FONT_COLOR
}

title Order System CQRS Pattern

Person(customer, "Customer", "System user")

System_Boundary(system, "Order System") {
    ' Command Side
    Container_Boundary(command_side, "Command Side") {
        Component(command_api, "Command API", "REST/GraphQL", "Handles commands")
        Component(command_handlers, "Command Handlers", "Services", "Process commands")
        Component(domain_model, "Domain Model", "Aggregates", "Business logic")
        Component(event_publisher, "Event Publisher", "Service", "Publishes domain events")
        
        ComponentDb(write_db, "Write Database", "SQL/NoSQL", "Optimized for writes")
    }
    
    ' Event Bus
    Container_Boundary(event_bus, "Event Bus") {
        Component(event_broker, "Event Broker", "Kafka/RabbitMQ", "Distributes events")
    }
    
    ' Query Side
    Container_Boundary(query_side, "Query Side") {
        Component(query_api, "Query API", "REST/GraphQL", "Handles queries")
        Component(query_handlers, "Query Handlers", "Services", "Process queries")
        Component(read_models, "Read Models", "DTOs", "Optimized for reading")
        Component(projections, "Projections", "Services", "Updates read models")
        
        ComponentDb(read_db, "Read Database", "SQL/NoSQL", "Optimized for reads")
    }
}

' External Systems
System_Ext(payment_system, "Payment System", "Processes payments")
System_Ext(logistics_system, "Logistics System", "Handles deliveries")

' Relationships - Command Side
Rel(customer, command_api, "Sends commands", "HTTP/JSON")
Rel(command_api, command_handlers, "Routes to", "")
Rel(command_handlers, domain_model, "Uses", "")
Rel(domain_model, event_publisher, "Generates events", "")
Rel(command_handlers, write_db, "Persists state", "")
Rel(event_publisher, event_broker, "Publishes events", "")

' Relationships - Query Side
Rel(customer, query_api, "Sends queries", "HTTP/JSON")
Rel(query_api, query_handlers, "Routes to", "")
Rel(query_handlers, read_models, "Uses", "")
Rel(query_handlers, read_db, "Reads from", "")
Rel(projections, read_db, "Updates", "")
Rel(event_broker, projections, "Triggers", "")

' External System Relationships
Rel(command_handlers, payment_system, "Integrates with", "")
Rel(command_handlers, logistics_system, "Integrates with", "")

' Notes
note right of command_side
  Command Side:
  - Handles business operations
  - Validates commands
  - Maintains consistency
  - Generates domain events
end note

note right of query_side
  Query Side:
  - Optimized for reading
  - Denormalized data models
  - Eventually consistent
  - Multiple specialized views
end note

note right of event_bus
  Event Bus:
  - Asynchronous communication
  - Event distribution
  - Decoupling mechanism
end note

@enduml