@startuml Event Sourcing Diagram

' C4 Model Definitions
!define LAYOUT_WITH_LEGEND
!define SHOW_PERSON_PORTRAIT

' C4 Element Styles
!define C4_COMPONENT_FONT_COLOR #000000
!define C4_COMPONENT_BG_COLOR #85BBF0
!define C4_CONTAINER_FONT_COLOR #000000
!define C4_CONTAINER_BG_COLOR #438DD5
!define C4_SYSTEM_FONT_COLOR #FFFFFF
!define C4_SYSTEM_BG_COLOR #1168BD
!define C4_PERSON_FONT_COLOR #FFFFFF
!define C4_PERSON_BG_COLOR #08427B
!define C4_BOUNDARY_COLOR #444444

' C4 Element Macros
!define Container_Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Component(e_alias, e_label, e_techn, e_descr) rectangle "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<component>> as e_alias
!define ComponentDb(e_alias, e_label, e_techn, e_descr) database "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<database>> as e_alias
!define System_Ext(e_alias, e_label, e_descr) rectangle "==e_label\n\ne_descr" <<external_system>> as e_alias
!define Rel_R(e_from, e_to, e_label) e_from -right-> e_to : "e_label"
!define Rel_L(e_from, e_to, e_label) e_from -left-> e_to : "e_label"
!define Rel_D(e_from, e_to, e_label) e_from -down-> e_to : "e_label"
!define Rel_U(e_from, e_to, e_label) e_from -up-> e_to : "e_label"

' Styling
skinparam rectangle {
    FontColor<<component>> C4_COMPONENT_FONT_COLOR
    BackgroundColor<<component>> C4_COMPONENT_BG_COLOR
    FontColor<<boundary>> #444444
    BorderColor<<boundary>> C4_BOUNDARY_COLOR
    BorderStyle<<boundary>> dashed
    FontColor<<external_system>> C4_SYSTEM_FONT_COLOR
    BackgroundColor<<external_system>> #999999
}

skinparam database {
    BackgroundColor C4_COMPONENT_BG_COLOR
}

title Order System Event Sourcing Pattern

' Components
Container_Boundary(application, "Application") {
    Component(command_handler, "Command Handler", "Service", "Processes commands")
    Component(aggregate, "Order Aggregate", "Domain Model", "Business logic")
    Component(event_store_client, "Event Store Client", "Client", "Interacts with event store")
}

Container_Boundary(event_store, "Event Store") {
    ComponentDb(event_log, "Event Log", "Append-only store", "Stores all events")
    Component(event_publisher, "Event Publisher", "Service", "Publishes events to subscribers")
    Component(snapshot_store, "Snapshot Store", "Database", "Stores aggregate snapshots")
}

Container_Boundary(projections, "Projections") {
    Component(projection_engine, "Projection Engine", "Service", "Processes events")
    Component(order_projection, "Order Projection", "Projection", "Order read model")
    Component(payment_projection, "Payment Projection", "Projection", "Payment read model")
    Component(delivery_projection, "Delivery Projection", "Projection", "Delivery read model")
    Component(analytics_projection, "Analytics Projection", "Projection", "Analytics data")
}

Container_Boundary(query_side, "Query Side") {
    ComponentDb(read_models, "Read Models", "Database", "Optimized for queries")
    Component(query_api, "Query API", "REST/GraphQL", "Handles queries")
}

' External Systems
System_Ext(external_systems, "External Systems", "Subscribers")

' Relationships - Command Flow
Rel_R(command_handler, aggregate, "1. Loads/executes")
Rel_R(aggregate, event_store_client, "2. Emits events")
Rel_R(event_store_client, event_log, "3. Appends events")
Rel_R(event_log, event_publisher, "4. Notifies")

' Relationships - Event Processing
Rel_D(event_publisher, projection_engine, "5. Publishes events")
Rel_D(event_publisher, external_systems, "5. Publishes events")
Rel_R(projection_engine, order_projection, "6. Updates")
Rel_R(projection_engine, payment_projection, "6. Updates")
Rel_R(projection_engine, delivery_projection, "6. Updates")
Rel_R(projection_engine, analytics_projection, "6. Updates")

' Relationships - Query Flow
Rel_U(order_projection, read_models, "7. Writes to")
Rel_U(payment_projection, read_models, "7. Writes to")
Rel_U(delivery_projection, read_models, "7. Writes to")
Rel_U(analytics_projection, read_models, "7. Writes to")
Rel_L(query_api, read_models, "8. Reads from")

' Relationships - Snapshots
Rel_D(event_store_client, snapshot_store, "Creates/loads snapshots")
Rel_U(snapshot_store, aggregate, "Restores state")

' Notes
note right of event_log
  Event Log:
  - Immutable, append-only store
  - Source of truth
  - Complete audit trail
  - Enables temporal queries
end note

note right of projection_engine
  Projections:
  - Transform events into read models
  - Can be rebuilt from event log
  - Multiple specialized views
  - Eventually consistent
end note

note right of snapshot_store
  Snapshots:
  - Performance optimization
  - Periodic state captures
  - Reduces event replay time
  - Not source of truth
end note

note right of external_systems
  Event Subscribers:
  - Integration with other systems
  - Analytics processing
  - Notifications
  - Workflow triggers
end note

@enduml