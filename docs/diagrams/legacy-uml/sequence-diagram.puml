@startuml 訂單處理時序圖
skinparam responseMessageBelowArrow true

actor "Client" as C
participant "OrderController" as OC
participant "OrderApplicationService" as OAS
participant "OrderFactory" as OF
participant "Order" as O
participant "OrderRepository" as OR
participant "InventoryServicePort" as ISP
participant "PaymentServicePort" as PSP
participant "LogisticsServicePort" as LSP
participant "DomainEventPublisher" as DEP

== 瀏覽商品 ==
C -> OC: getProducts()
activate OC
OC -> OAS: getProducts()
activate OAS
OAS --> OC: ProductList
deactivate OAS
OC --> C: ProductResponse
deactivate OC

== 建立訂單 ==
C -> OC: createOrder(CreateOrderRequest)
activate OC

OC -> OAS: createOrder(CreateOrderCommand)
activate OAS

OAS -> OF: createOrder(customerId, address)
activate OF
OF --> OAS: Order
deactivate OF

OAS -> OR: save(order)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> O: create()
activate O
O -> DEP: publish(OrderCreatedEvent)
activate DEP
DEP --> O: void
deactivate DEP
O --> OAS: void
deactivate O

OAS --> OC: OrderResponse
deactivate OAS

OC --> C: OrderResponse
deactivate OC

== 添加訂單項目 ==
C -> OC: addOrderItem(AddOrderItemRequest)
activate OC

OC -> OAS: addOrderItem(AddOrderItemCommand)
activate OAS

OAS -> OR: findById(orderId)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> OF: createOrderItem(productId, quantity, price)
activate OF
OF --> OAS: OrderItem
deactivate OF

OAS -> O: addItem(orderItem)
activate O
O -> DEP: publish(OrderItemAddedEvent)
activate DEP
DEP --> O: void
deactivate DEP
O --> OAS: void
deactivate O

OAS -> OR: save(order)
activate OR
OR --> OAS: Order
deactivate OR

OAS --> OC: OrderResponse
deactivate OAS

OC --> C: OrderResponse
deactivate OC

== 提交訂單 ==
C -> OC: submitOrder(orderId)
activate OC

OC -> OAS: submitOrder(orderId)
activate OAS

OAS -> OR: findById(orderId)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> O: submit()
activate O
O -> DEP: publish(OrderSubmittedEvent)
activate DEP
DEP --> O: void
deactivate DEP
O --> OAS: void
deactivate O

OAS -> ISP: checkInventory(order)
activate ISP
ISP --> OAS: InventoryCheckResult
deactivate ISP

alt 庫存充足
  OAS -> O: updateStatus(PENDING_PAYMENT)
  activate O
  O --> OAS: void
  deactivate O
  
  OAS -> OR: save(order)
  activate OR
  OR --> OAS: Order
  deactivate OR
  
  OAS --> OC: OrderResponse
  OC --> C: OrderResponse(PENDING_PAYMENT)
else 庫存不足
  OAS -> O: updateStatus(FAILED)
  activate O
  O -> DEP: publish(InventoryInsufficientEvent)
  activate DEP
  DEP --> O: void
  deactivate DEP
  O --> OAS: void
  deactivate O
  
  OAS -> OR: save(order)
  activate OR
  OR --> OAS: Order
  deactivate OR
  
  OAS --> OC: OrderResponse
  OC --> C: OrderResponse(FAILED, "庫存不足")
end
deactivate OAS
deactivate OC

== 處理支付 ==
C -> OC: processPayment(orderId, paymentDetails)
activate OC

OC -> OAS: processPayment(orderId, paymentDetails)
activate OAS

OAS -> OR: findById(orderId)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> PSP: processPayment(order, paymentDetails)
activate PSP
PSP --> OAS: PaymentResult
deactivate PSP

alt 支付成功
  OAS -> O: updateStatus(CONFIRMED)
  activate O
  O -> DEP: publish(PaymentCompletedEvent)
  activate DEP
  DEP --> O: void
  deactivate DEP
  O --> OAS: void
  deactivate O
  
  OAS -> LSP: arrangeDelivery(order)
  activate LSP
  LSP --> OAS: DeliveryStatus
  deactivate LSP
  
  OAS -> OR: save(order)
  activate OR
  OR --> OAS: Order
  deactivate OR
  
  OAS --> OC: OrderResponse
  OC --> C: OrderResponse(CONFIRMED)
else 支付失敗
  OAS -> O: updateStatus(FAILED)
  activate O
  O -> DEP: publish(PaymentFailedEvent)
  activate DEP
  DEP --> O: void
  deactivate DEP
  O --> OAS: void
  deactivate O
  
  OAS -> OR: save(order)
  activate OR
  OR --> OAS: Order
  deactivate OR
  
  OAS --> OC: OrderResponse
  OC --> C: OrderResponse(FAILED, "支付失敗")
end
deactivate OAS
deactivate OC

== 配送訂單 ==
note over C, DEP
  配送流程由物流系統處理，
  訂單系統僅接收狀態更新
end note

LSP -> OAS: updateDeliveryStatus(orderId, status)
activate OAS

OAS -> OR: findById(orderId)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> O: updateDeliveryStatus(status)
activate O
O -> DEP: publish(DeliveryStatusChangedEvent)
activate DEP
DEP --> O: void
deactivate DEP
O --> OAS: void
deactivate O

OAS -> OR: save(order)
activate OR
OR --> OAS: Order
deactivate OR

OAS --> LSP: void
deactivate OAS

== 完成訂單 ==
C -> OC: confirmReceipt(orderId)
activate OC

OC -> OAS: confirmReceipt(orderId)
activate OAS

OAS -> OR: findById(orderId)
activate OR
OR --> OAS: Order
deactivate OR

OAS -> O: complete()
activate O
O -> DEP: publish(OrderCompletedEvent)
activate DEP
DEP --> O: void
deactivate DEP
O --> OAS: void
deactivate O

OAS -> OR: save(order)
activate OR
OR --> OAS: Order
deactivate OR

OAS --> OC: OrderResponse
deactivate OAS

OC --> C: OrderResponse(COMPLETED)
deactivate OC

@enduml