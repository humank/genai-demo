@startuml Domain Event Handling - Class Diagram

skinparam classAttributeIconSize 0
skinparam classFontStyle bold
skinparam classBackgroundColor #f5f5f5
skinparam classBorderColor #999999
skinparam arrowColor #666666
skinparam packageBackgroundColor #eeeeee

package "Domain Layer" {
  interface DomainEvent {
    +getEventId(): String
    +getOccurredOn(): LocalDateTime
  }
  
  interface EventHandler<T> {
    +handle(T event): void
  }
  
  annotation EventSubscriber {
    +value(): Class<? extends DomainEvent>
  }
  
  class DomainEventBus {
    -eventPublisherAdapter: DomainEventPublisherAdapter
    +publish(event: DomainEvent): void
  }
  
  class DomainEventPublisherService {
    -static eventBus: DomainEventBus
    +publish(event: DomainEvent): void
    +static publishEvent(event: DomainEvent): void
  }
  
  class OrderEventHandler {
    +handleOrderCreated(event: OrderCreatedEvent): void
    +handleOrderItemAdded(event: OrderItemAddedEvent): void
    +handleOrderSubmitted(event: OrderSubmittedEvent): void
  }
  
  class NotificationEventHandler {
    +handleNotificationCreated(event: NotificationCreatedEvent): void
    +handleNotificationStatusChanged(event: NotificationStatusChangedEvent): void
  }
  
  class AggregateLifecycleAware {
    -getLifecycle(): AggregateLifecycle
    +apply(event: DomainEvent): void
  }
  
  class OrderCreatedEvent {
    -orderId: String
    -customerId: String
    -totalAmount: BigDecimal
  }
  
  class OrderItemAddedEvent {
    -orderId: String
    -productId: String
    -quantity: int
    -price: BigDecimal
  }
  
  class OrderSubmittedEvent {
    -orderId: String
    -customerId: String
    -totalAmount: BigDecimal
    -itemCount: int
  }
}

package "Infrastructure Layer" {
  class DomainEventPublisherAdapter {
    -eventPublisher: ApplicationEventPublisher
    +publish(event: DomainEvent): void
    +class DomainEventWrapper
  }
  
  class DomainEventSubscriptionManager {
    -subscriptions: Map<Class<?>, Map<Object, Method>>
    +postProcessAfterInitialization(bean: Object, beanName: String): Object
    +onApplicationEvent(springEvent: ApplicationEvent): void
    -registerSubscriber(bean: Object, method: Method, annotation: EventSubscriber): void
    -notifySubscribers(subscribers: Map<Object, Method>, event: DomainEvent): void
  }
}

' 关系
DomainEvent <|.. OrderCreatedEvent
DomainEvent <|.. OrderItemAddedEvent
DomainEvent <|.. OrderSubmittedEvent

DomainEventBus --> DomainEventPublisherAdapter: uses
DomainEventPublisherService --> DomainEventBus: uses
AggregateLifecycleAware --> DomainEventPublisherService: fallback to

OrderEventHandler ..> EventSubscriber: annotated with
NotificationEventHandler ..> EventSubscriber: annotated with

DomainEventSubscriptionManager ..> EventSubscriber: processes
DomainEventSubscriptionManager --> "Spring ApplicationEvent": listens to

DomainEventPublisherAdapter --> "Spring ApplicationEventPublisher": uses

@enduml