@startuml 領域模型圖

' 樣式設定
skinparam class {
    BackgroundColor<<AggregateRoot>> LightSalmon
    BackgroundColor<<Entity>> LightBlue
    BackgroundColor<<ValueObject>> LightGreen
    BackgroundColor<<DomainEvent>> LightYellow
    BackgroundColor<<DomainService>> LightGray
    BackgroundColor<<Repository>> LightCyan
    BackgroundColor<<Factory>> LightPink
    BackgroundColor<<Policy>> LightGoldenRodYellow
    BackgroundColor<<Specification>> LightSkyBlue
}

' 註解
note as N1
  顏色說明:
  <back:LightSalmon>聚合根</back>
  <back:LightBlue>實體</back>
  <back:LightGreen>值對象</back>
  <back:LightYellow>領域事件</back>
  <back:LightGray>領域服務</back>
  <back:LightCyan>儲存庫</back>
  <back:LightPink>工廠</back>
  <back:LightGoldenRodYellow>策略</back>
  <back:LightSkyBlue>規格</back>
end note

' 訂單聚合
package "訂單聚合" {
    class Order <<AggregateRoot>> {
        - orderId: OrderId
        - customerId: String
        - orderItems: List<OrderItem>
        - shippingAddress: String
        - status: OrderStatus
        - totalAmount: Money
        - discountAmount: Money
        - createdAt: LocalDateTime
        - updatedAt: LocalDateTime
        + addItem(item: OrderItem): void
        + removeItem(itemId: String): void
        + submit(): void
        + cancel(): void
        + applyDiscount(amount: Money): void
        + calculateTotal(): Money
    }
    
    class OrderItem <<Entity>> {
        - itemId: String
        - productId: String
        - productName: String
        - quantity: int
        - unitPrice: Money
        + calculateSubtotal(): Money
    }
    
    class OrderId <<ValueObject>> {
        - id: UUID
        + toString(): String
    }
    
    enum OrderStatus <<ValueObject>> {
        CREATED
        PENDING
        CONFIRMED
        PROCESSING
        SHIPPED
        DELIVERED
        COMPLETED
        CANCELLED
    }
    
    class OrderCreatedEvent <<DomainEvent>> {
        - orderId: OrderId
        - customerId: String
        - createdAt: LocalDateTime
    }
    
    class OrderItemAddedEvent <<DomainEvent>> {
        - orderId: OrderId
        - itemId: String
        - productId: String
        - quantity: int
        - unitPrice: Money
    }
    
    class OrderFactory <<Factory>> {
        + createOrder(customerId: String, shippingAddress: String): Order
        + createOrderItem(productId: String, productName: String, quantity: int, unitPrice: Money): OrderItem
    }
    
    class OrderDiscountPolicy <<Policy>> {
        + calculateDiscount(order: Order): Money
    }
    
    interface OrderRepository <<Repository>> {
        + save(order: Order): Order
        + findById(orderId: OrderId): Optional<Order>
        + findByCustomerId(customerId: String): List<Order>
    }
}

' 支付聚合
package "支付聚合" {
    class Payment <<AggregateRoot>> {
        - paymentId: PaymentId
        - orderId: OrderId
        - amount: Money
        - method: PaymentMethod
        - status: PaymentStatus
        - transactionId: String
        - failureReason: String
        - createdAt: LocalDateTime
        - updatedAt: LocalDateTime
        + complete(transactionId: String): void
        + fail(reason: String): void
        + refund(): void
        + retry(): void
    }
    
    class PaymentId <<ValueObject>> {
        - id: UUID
        + toString(): String
    }
    
    enum PaymentMethod <<ValueObject>> {
        CREDIT_CARD
        DEBIT_CARD
        BANK_TRANSFER
        DIGITAL_WALLET
        CASH_ON_DELIVERY
    }
    
    enum PaymentStatus <<ValueObject>> {
        PENDING
        COMPLETED
        FAILED
        REFUNDED
    }
    
    class PaymentCompletedEvent <<DomainEvent>> {
        - paymentId: PaymentId
        - orderId: OrderId
        - amount: Money
        - transactionId: String
        - completedAt: LocalDateTime
    }
    
    class PaymentFailedEvent <<DomainEvent>> {
        - paymentId: PaymentId
        - orderId: OrderId
        - failureReason: String
        - failedAt: LocalDateTime
    }
    
    interface PaymentRepository <<Repository>> {
        + save(payment: Payment): Payment
        + findById(paymentId: PaymentId): Optional<Payment>
        + findByOrderId(orderId: OrderId): Optional<Payment>
    }
    
    class PaymentService <<DomainService>> {
        + processPayment(payment: Payment): void
        + validatePayment(payment: Payment): boolean
    }
}

' 定價聚合
package "定價聚合" {
    class PricingRule <<AggregateRoot>> {
        - priceId: PriceId
        - productId: ProductId
        - promotionId: PromotionId
        - finalPrice: Money
        - discountPercentage: double
        - discountAmount: Money
        - effectiveFrom: LocalDateTime
        - effectiveTo: LocalDateTime
        - isActive: boolean
        - commissionRates: List<CommissionRate>
        - productCategory: ProductCategory
        + isValidNow(): boolean
        + calculateCommission(isEventPromotion: boolean): Money
        + updateCommissionRate(normalRate: int, eventRate: int): void
        + deactivate(): void
        + activate(): void
    }
    
    class CommissionRate <<Entity>> {
        - category: ProductCategory
        - normalRate: int
        - eventRate: int
        + getNormalRate(): int
        + getEventRate(): int
        + setNormalRate(rate: int): void
        + setEventRate(rate: int): void
    }
    
    class PriceId <<ValueObject>> {
        - id: UUID
        + toString(): String
    }
    
    enum ProductCategory <<ValueObject>> {
        ELECTRONICS
        FASHION
        GROCERIES
        HOME_APPLIANCES
        BEAUTY
        SPORTS
        BOOKS
        TOYS
        AUTOMOTIVE
        HEALTH
        GENERAL
    }
    
    interface PricingRuleRepository <<Repository>> {
        + save(pricingRule: PricingRule): PricingRule
        + findById(priceId: PriceId): Optional<PricingRule>
        + findByProductId(productId: ProductId): List<PricingRule>
        + findByProductCategory(category: ProductCategory): List<PricingRule>
    }
    
    class CommissionService <<DomainService>> {
        + calculateCommission(product: Product, isEventPromotion: boolean): Money
        + getCommissionRate(category: ProductCategory): CommissionRate
        + getCommissionRate(category: ProductCategory, event: String): CommissionRate
    }
}

' 配送聚合
package "配送聚合" {
    class Delivery <<AggregateRoot>> {
        - id: DeliveryId
        - orderId: OrderId
        - shippingAddress: String
        - status: DeliveryStatus
        - deliveryPersonId: String
        - deliveryPersonName: String
        - deliveryPersonContact: String
        - estimatedDeliveryTime: LocalDateTime
        - actualDeliveryTime: LocalDateTime
        - trackingNumber: String
        - failureReason: String
        - refusalReason: String
        - delayReason: String
        - redeliveryScheduled: boolean
        - createdAt: LocalDateTime
        - updatedAt: LocalDateTime
        + allocateResources(deliveryPersonId: String, deliveryPersonName: String, deliveryPersonContact: String, estimatedDeliveryTime: LocalDateTime): void
        + updateAddress(newAddress: String): void
        + markAsDelivered(): void
        + markAsFailed(reason: String): void
        + markAsRefused(reason: String): void
        + markAsDelayed(reason: String, newEstimatedDeliveryTime: LocalDateTime): void
        + cancel(): void
        + scheduleRedelivery(): void
        + rearrange(): void
    }
    
    class DeliveryId <<ValueObject>> {
        - id: UUID
        + toString(): String
        + fromUUID(id: UUID): DeliveryId
    }
    
    enum DeliveryStatus <<ValueObject>> {
        PENDING_SHIPMENT
        IN_TRANSIT
        DELIVERED
        DELAYED
        DELIVERY_FAILED
        REFUSED
        CANCELLED
    }
    
    interface DeliveryRepository <<Repository>> {
        + save(delivery: Delivery): Delivery
        + findById(id: DeliveryId): Optional<Delivery>
        + findByUUID(id: UUID): Optional<Delivery>
        + findByOrderId(orderId: OrderId): Optional<Delivery>
        + findByStatus(status: DeliveryStatus): List<Delivery>
        + findFailedDeliveries(): List<Delivery>
        + findDeliveriesForRedelivery(): List<Delivery>
        + findByDeliveryPersonId(deliveryPersonId: String): List<Delivery>
        + count(): long
    }
    
    interface DeliveryService <<DomainService>> {
        + createDelivery(orderId: OrderId, shippingAddress: String): Delivery
        + arrangeDelivery(orderId: OrderId): boolean
        + allocateDeliveryResources(deliveryId: DeliveryId, deliveryPersonId: String, deliveryPersonName: String, deliveryPersonContact: String, estimatedDeliveryTime: LocalDateTime): boolean
        + updateDeliveryAddress(deliveryId: DeliveryId, newAddress: String): boolean
        + markAsDelivered(deliveryId: DeliveryId): boolean
        + markAsFailed(deliveryId: DeliveryId, reason: String): boolean
        + markAsRefused(deliveryId: DeliveryId, reason: String): boolean
        + markAsDelayed(deliveryId: DeliveryId, reason: String, newEstimatedDeliveryTime: LocalDateTime): boolean
        + cancelDelivery(deliveryId: DeliveryId): boolean
        + scheduleRedelivery(deliveryId: DeliveryId): boolean
    }
}

' 共用值對象
package "共用值對象" {
    class Money <<ValueObject>> {
        - amount: BigDecimal
        - currency: Currency
        + add(money: Money): Money
        + subtract(money: Money): Money
        + multiply(multiplier: int): Money
        + multiply(multiplier: double): Money
        + divide(divisor: int): Money
        + isGreaterThan(other: Money): boolean
        + {static} of(amount: BigDecimal, currencyCode: String): Money
        + {static} of(amount: double, currencyCode: String): Money
        + {static} twd(amount: double): Money
        + {static} zero(): Money
    }
    
    class ProductId <<ValueObject>> {
        - id: String
        + toString(): String
    }
    
    class PromotionId <<ValueObject>> {
        - id: String
        + toString(): String
    }
}

' 關係
Order "1" *-- "many" OrderItem : contains
Order "1" *-- "1" OrderId : identified by
Order "1" *-- "1" OrderStatus : has
Order "1" *-- "1" Money : totalAmount
Order "1" *-- "1" Money : discountAmount
Order "1" --> "many" OrderCreatedEvent : publishes
Order "1" --> "many" OrderItemAddedEvent : publishes
OrderFactory ..> Order : creates
OrderFactory ..> OrderItem : creates
OrderDiscountPolicy ..> Order : applies to
OrderRepository ..> Order : manages

Payment "1" *-- "1" PaymentId : identified by
Payment "1" *-- "1" OrderId : references
Payment "1" *-- "1" Money : amount
Payment "1" *-- "1" PaymentMethod : has
Payment "1" *-- "1" PaymentStatus : has
Payment "1" --> "many" PaymentCompletedEvent : publishes
Payment "1" --> "many" PaymentFailedEvent : publishes
PaymentRepository ..> Payment : manages
PaymentService ..> Payment : processes

PricingRule "1" *-- "many" CommissionRate : contains
PricingRule "1" *-- "1" PriceId : identified by
PricingRule "1" *-- "1" ProductId : references
PricingRule "1" *-- "1" PromotionId : references
PricingRule "1" *-- "1" Money : finalPrice
PricingRule "1" *-- "1" Money : discountAmount
PricingRule "1" *-- "1" ProductCategory : has
PricingRuleRepository ..> PricingRule : manages
CommissionService ..> PricingRule : uses
CommissionService ..> CommissionRate : uses

Delivery "1" *-- "1" DeliveryId : identified by
Delivery "1" *-- "1" OrderId : references
Delivery "1" *-- "1" DeliveryStatus : has
DeliveryRepository ..> Delivery : manages
DeliveryService ..> Delivery : manages

@enduml