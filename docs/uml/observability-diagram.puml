@startuml Observability Architecture Diagram

' C4 Model Definitions
!define LAYOUT_WITH_LEGEND
!define SHOW_PERSON_PORTRAIT

' C4 Element Styles
!define C4_COMPONENT_FONT_COLOR #000000
!define C4_COMPONENT_BG_COLOR #85BBF0
!define C4_CONTAINER_FONT_COLOR #000000
!define C4_CONTAINER_BG_COLOR #438DD5
!define C4_SYSTEM_FONT_COLOR #FFFFFF
!define C4_SYSTEM_BG_COLOR #1168BD
!define C4_PERSON_FONT_COLOR #FFFFFF
!define C4_PERSON_BG_COLOR #08427B
!define C4_BOUNDARY_COLOR #444444

' C4 Element Macros
!define Person(e_alias, e_label, e_descr) actor "==e_label\n\ne_descr" as e_alias
!define Container_Boundary(e_alias, e_label) rectangle "==e_label" <<boundary>> as e_alias
!define Component(e_alias, e_label, e_techn, e_descr) rectangle "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<component>> as e_alias
!define ComponentDb(e_alias, e_label, e_techn, e_descr) database "==e_label\n<size:12>[e_techn]</size>\n\ne_descr" <<database>> as e_alias
!define Rel(e_from, e_to, e_label) e_from --> e_to : "e_label"

' Styling
skinparam rectangle {
    FontColor<<component>> C4_COMPONENT_FONT_COLOR
    BackgroundColor<<component>> C4_COMPONENT_BG_COLOR
    FontColor<<boundary>> #444444
    BorderColor<<boundary>> C4_BOUNDARY_COLOR
    BorderStyle<<boundary>> dashed
}

skinparam database {
    BackgroundColor C4_COMPONENT_BG_COLOR
}

skinparam actor {
    BackgroundColor C4_PERSON_BG_COLOR
    FontColor C4_PERSON_FONT_COLOR
}

title Order System Observability Architecture

' Application Components
Container_Boundary(application, "Application") {
    Component(api_gateway, "API Gateway", "Gateway", "Entry point for requests")
    Component(order_service, "Order Service", "Service", "Manages orders")
    Component(payment_service, "Payment Service", "Service", "Processes payments")
    Component(delivery_service, "Delivery Service", "Service", "Manages deliveries")
    ComponentDb(database, "Database", "PostgreSQL", "Stores application data")
    Component(message_broker, "Message Broker", "Kafka/RabbitMQ", "Event distribution")
}

' Instrumentation Layer
Container_Boundary(instrumentation, "Instrumentation") {
    Component(metrics_collector, "Metrics Collector", "Micrometer", "Collects application metrics")
    Component(log_appender, "Log Appender", "Logback/Log4j", "Formats and routes logs")
    Component(trace_reporter, "Trace Reporter", "OpenTelemetry", "Collects distributed traces")
    Component(health_checker, "Health Checker", "Actuator", "Exposes health endpoints")
}

' Collection Layer
Container_Boundary(collection, "Collection") {
    Component(metrics_agent, "Metrics Agent", "Prometheus", "Scrapes and forwards metrics")
    Component(log_shipper, "Log Shipper", "Fluentd/Filebeat", "Ships logs to central storage")
    Component(trace_collector, "Trace Collector", "Jaeger/Zipkin", "Collects and processes traces")
    Component(event_collector, "Event Collector", "Custom", "Collects business events")
}

' Storage Layer
Container_Boundary(storage, "Storage") {
    ComponentDb(metrics_db, "Metrics Database", "Prometheus/InfluxDB", "Time-series database")
    ComponentDb(log_store, "Log Store", "Elasticsearch", "Centralized log storage")
    ComponentDb(trace_store, "Trace Store", "Jaeger/Zipkin", "Distributed trace storage")
    ComponentDb(event_store, "Event Store", "Kafka/EventStoreDB", "Business event storage")
}

' Processing Layer
Container_Boundary(processing, "Processing") {
    Component(log_processor, "Log Processor", "Logstash", "Processes and enriches logs")
    Component(metrics_processor, "Metrics Processor", "Prometheus Rules", "Processes metrics")
    Component(anomaly_detector, "Anomaly Detector", "ML/Statistical", "Detects anomalies")
    Component(correlation_engine, "Correlation Engine", "Custom", "Correlates observability data")
}

' Visualization Layer
Container_Boundary(visualization, "Visualization") {
    Component(dashboard, "Dashboards", "Grafana", "Visualizes metrics and logs")
    Component(trace_ui, "Trace Explorer", "Jaeger/Zipkin UI", "Visualizes traces")
    Component(log_ui, "Log Explorer", "Kibana", "Searches and visualizes logs")
    Component(business_dashboard, "Business Dashboards", "Custom", "Business KPIs")
}

' Alerting Layer
Container_Boundary(alerting, "Alerting") {
    Component(alert_manager, "Alert Manager", "Prometheus AM", "Manages alerts")
    Component(notification_service, "Notification Service", "Custom", "Sends notifications")
    Component(incident_manager, "Incident Manager", "PagerDuty/OpsGenie", "Manages incidents")
    Component(runbook_automation, "Runbook Automation", "Custom", "Automates responses")
}

' External Systems
Person(operator, "Operator", "DevOps/SRE")
Person(developer, "Developer", "Application developer")
Person(business_user, "Business User", "Business stakeholder")

' Instrumentation Relationships
Rel(api_gateway, metrics_collector, "Reports metrics")
Rel(order_service, metrics_collector, "Reports metrics")
Rel(payment_service, metrics_collector, "Reports metrics")
Rel(delivery_service, metrics_collector, "Reports metrics")
Rel(database, metrics_collector, "Reports metrics")
Rel(message_broker, metrics_collector, "Reports metrics")

Rel(api_gateway, log_appender, "Generates logs")
Rel(order_service, log_appender, "Generates logs")
Rel(payment_service, log_appender, "Generates logs")
Rel(delivery_service, log_appender, "Generates logs")
Rel(database, log_appender, "Generates logs")
Rel(message_broker, log_appender, "Generates logs")

Rel(api_gateway, trace_reporter, "Reports spans")
Rel(order_service, trace_reporter, "Reports spans")
Rel(payment_service, trace_reporter, "Reports spans")
Rel(delivery_service, trace_reporter, "Reports spans")

Rel(api_gateway, health_checker, "Exposes health")
Rel(order_service, health_checker, "Exposes health")
Rel(payment_service, health_checker, "Exposes health")
Rel(delivery_service, health_checker, "Exposes health")
Rel(database, health_checker, "Exposes health")
Rel(message_broker, health_checker, "Exposes health")

' Collection Relationships
Rel(metrics_collector, metrics_agent, "Collected by")
Rel(log_appender, log_shipper, "Shipped by")
Rel(trace_reporter, trace_collector, "Collected by")
Rel(message_broker, event_collector, "Events collected by")

' Storage Relationships
Rel(metrics_agent, metrics_db, "Stores in")
Rel(log_shipper, log_processor, "Forwards to")
Rel(log_processor, log_store, "Stores in")
Rel(trace_collector, trace_store, "Stores in")
Rel(event_collector, event_store, "Stores in")

' Processing Relationships
Rel(metrics_db, metrics_processor, "Processed by")
Rel(log_store, anomaly_detector, "Analyzed by")
Rel(metrics_db, anomaly_detector, "Analyzed by")
Rel(metrics_processor, correlation_engine, "Feeds")
Rel(log_processor, correlation_engine, "Feeds")
Rel(trace_store, correlation_engine, "Feeds")
Rel(event_store, correlation_engine, "Feeds")

' Visualization Relationships
Rel(metrics_db, dashboard, "Visualized in")
Rel(log_store, log_ui, "Explored in")
Rel(trace_store, trace_ui, "Visualized in")
Rel(event_store, business_dashboard, "Visualized in")
Rel(correlation_engine, dashboard, "Feeds")

' Alerting Relationships
Rel(metrics_processor, alert_manager, "Triggers alerts")
Rel(anomaly_detector, alert_manager, "Triggers alerts")
Rel(alert_manager, notification_service, "Sends to")
Rel(notification_service, incident_manager, "Creates incidents")
Rel(incident_manager, runbook_automation, "Triggers")
Rel(runbook_automation, application, "Executes actions")

' User Relationships
Rel(operator, dashboard, "Monitors")
Rel(operator, incident_manager, "Responds to")
Rel(developer, trace_ui, "Analyzes")
Rel(developer, log_ui, "Debugs with")
Rel(business_user, business_dashboard, "Reviews")

' Notes
note right of instrumentation
  <b>Instrumentation:</b>
  - Metrics: counters, gauges, histograms
  - Logs: structured JSON logging
  - Traces: request context propagation
  - Health: readiness and liveness
end note

note right of collection
  <b>Collection:</b>
  - Pull-based metrics collection
  - Push-based log shipping
  - Sampling for high-volume traces
  - Event streaming for business events
end note

note right of processing
  <b>Processing:</b>
  - Log enrichment and normalization
  - Metric aggregation and alerting rules
  - Anomaly detection using baselines
  - Cross-signal correlation
end note

note right of alerting
  <b>Alerting:</b>
  - Alert deduplication and grouping
  - Multi-channel notifications
  - On-call rotation management
  - Automated remediation
end note

@enduml