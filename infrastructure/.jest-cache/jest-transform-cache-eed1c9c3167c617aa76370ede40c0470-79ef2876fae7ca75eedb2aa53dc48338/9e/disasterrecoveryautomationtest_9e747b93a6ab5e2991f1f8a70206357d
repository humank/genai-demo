06da291e57b128a5c6c77d4a3233567b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("aws-cdk-lib");
const assertions_1 = require("aws-cdk-lib/assertions");
const rds = require("aws-cdk-lib/aws-rds");
const route53 = require("aws-cdk-lib/aws-route53");
const sns = require("aws-cdk-lib/aws-sns");
const disaster_recovery_automation_1 = require("../lib/constructs/disaster-recovery-automation");
// Helper function to create health checks with proper typing
function createHealthCheck(scope, id, fqdn) {
    return new route53.CfnHealthCheck(scope, id, {
        type: 'HTTPS',
        resourcePath: '/health',
        fullyQualifiedDomainName: fqdn
    });
}
describe('DisasterRecoveryAutomation', () => {
    let app;
    let stack;
    let template;
    beforeEach(() => {
        app = new cdk.App();
        stack = new cdk.Stack(app, 'TestStack', {
            env: {
                account: '123456789012',
                region: 'ap-northeast-1'
            }
        });
    });
    describe('Basic Construction', () => {
        test('should create DR automation construct with minimal configuration', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            const drAutomation = new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'test',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            expect(drAutomation).toBeDefined();
            expect(drAutomation.failoverStateMachine).toBeDefined();
            expect(drAutomation.chaosTestingStateMachine).toBeDefined();
            expect(drAutomation.monthlyTestingRule).toBeDefined();
            expect(drAutomation.drMonitoringDashboard).toBeDefined();
            expect(drAutomation.failoverLambda).toBeDefined();
            expect(drAutomation.chaosTestingLambda).toBeDefined();
        });
        test('should create DR automation construct with full configuration', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            const auroraCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'AuroraCluster', {
                clusterIdentifier: 'test-cluster'
            });
            const hostedZone = route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'Z123456789',
                zoneName: 'example.com'
            });
            const primaryHealthCheck = createHealthCheck(stack, 'PrimaryHealthCheck', 'api.example.com');
            const secondaryHealthCheck = createHealthCheck(stack, 'SecondaryHealthCheck', 'api-dr.example.com');
            // When
            const drAutomation = new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                auroraCluster,
                hostedZone,
                primaryHealthCheck,
                secondaryHealthCheck,
                alertingTopic
            });
            // Then
            expect(drAutomation).toBeDefined();
            template = assertions_1.Template.fromStack(stack);
            // Verify Lambda functions are created
            template.hasResourceProperties('AWS::Lambda::Function', {
                FunctionName: 'test-project-production-dr-failover'
            });
            template.hasResourceProperties('AWS::Lambda::Function', {
                FunctionName: 'test-project-production-dr-chaos-testing'
            });
        });
    });
    describe('Lambda Functions', () => {
        test('should create failover Lambda with correct configuration', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::Lambda::Function', {
                FunctionName: 'test-project-production-dr-failover',
                Runtime: 'python3.11',
                Handler: 'index.handler',
                Timeout: 900, // 15 minutes
                MemorySize: 512,
                Environment: {
                    Variables: {
                        PROJECT_NAME: 'test-project',
                        ENVIRONMENT: 'production',
                        PRIMARY_REGION: 'ap-east-2',
                        SECONDARY_REGION: 'ap-northeast-1',
                        LOG_LEVEL: 'INFO'
                    }
                }
            });
        });
        test('should create chaos testing Lambda with correct configuration', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::Lambda::Function', {
                FunctionName: 'test-project-production-dr-chaos-testing',
                Runtime: 'python3.11',
                Handler: 'index.handler',
                Timeout: 1800, // 30 minutes
                MemorySize: 1024,
                Environment: {
                    Variables: {
                        PROJECT_NAME: 'test-project',
                        ENVIRONMENT: 'production',
                        PRIMARY_REGION: 'ap-east-2',
                        SECONDARY_REGION: 'ap-northeast-1',
                        LOG_LEVEL: 'INFO'
                    }
                }
            });
        });
    });
    describe('Step Functions State Machines', () => {
        test('should create failover state machine', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::StepFunctions::StateMachine', {
                StateMachineName: 'test-project-production-dr-failover',
                Comment: 'Automated disaster recovery failover workflow'
            });
        });
        test('should create chaos testing state machine', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::StepFunctions::StateMachine', {
                StateMachineName: 'test-project-production-dr-chaos-testing',
                Comment: 'Automated chaos engineering and DR testing workflow'
            });
        });
    });
    describe('EventBridge Rules', () => {
        test('should create monthly testing rule', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::Events::Rule', {
                Name: 'test-project-production-monthly-dr-test',
                Description: 'Trigger monthly DR testing on the first Sunday of each month',
                ScheduleExpression: 'cron(0 2 ? * SUN#1 *)',
                State: 'ENABLED'
            });
        });
    });
    describe('CloudWatch Dashboard', () => {
        test('should create DR monitoring dashboard', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::CloudWatch::Dashboard', {
                DashboardName: 'test-project-production-dr-automation-monitoring'
            });
        });
    });
    describe('IAM Roles and Policies', () => {
        test('should create DR automation role with correct permissions', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::IAM::Role', {
                RoleName: 'test-project-production-dr-automation-role',
                Description: 'IAM role for disaster recovery automation operations'
            });
        });
    });
    describe('Systems Manager Parameters', () => {
        test('should create DR automation configuration parameter', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            template.hasResourceProperties('AWS::SSM::Parameter', {
                Name: '/test-project/production/dr/automation-config',
                Description: 'Enhanced DR automation configuration for test-project production',
                Tier: 'Standard'
            });
        });
    });
    describe('Health Check Monitoring', () => {
        test('should create health check monitoring when health checks are provided', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            const primaryHealthCheck = createHealthCheck(stack, 'PrimaryHealthCheck', 'api.example.com');
            const secondaryHealthCheck = createHealthCheck(stack, 'SecondaryHealthCheck', 'api-dr.example.com');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                primaryHealthCheck,
                secondaryHealthCheck,
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            // Should create alarm for primary health check failure
            template.hasResourceProperties('AWS::CloudWatch::Alarm', {
                AlarmName: 'test-project-production-primary-health-check-failure-automated',
                AlarmDescription: 'Primary region health check failure - triggers automated failover',
                ComparisonOperator: 'LessThanThreshold',
                Threshold: 1,
                EvaluationPeriods: 3,
                TreatMissingData: 'breaching'
            });
            // Should create EventBridge rule for automated failover trigger
            template.hasResourceProperties('AWS::Events::Rule', {
                Name: 'test-project-production-automated-failover-trigger',
                Description: 'Trigger automated failover when primary health check fails'
            });
        });
    });
    describe('Outputs', () => {
        test('should create all required outputs', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            // When
            new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                alertingTopic
            });
            // Then
            template = assertions_1.Template.fromStack(stack);
            // Check for outputs
            template.hasOutput('FailoverStateMachineArn', {});
            template.hasOutput('ChaosTestingStateMachineArn', {});
            template.hasOutput('MonthlyTestingRuleArn', {});
            template.hasOutput('DRMonitoringDashboardUrl', {});
            template.hasOutput('FailoverLambdaArn', {});
            template.hasOutput('ChaosTestingLambdaArn', {});
        });
    });
    describe('Integration Tests', () => {
        test('should integrate properly with existing infrastructure', () => {
            // Given
            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');
            const auroraCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'AuroraCluster', {
                clusterIdentifier: 'test-cluster'
            });
            const hostedZone = route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {
                hostedZoneId: 'Z123456789',
                zoneName: 'example.com'
            });
            // When
            const drAutomation = new disaster_recovery_automation_1.DisasterRecoveryAutomation(stack, 'DRAutomation', {
                projectName: 'test-project',
                environment: 'production',
                primaryRegion: 'ap-east-2',
                secondaryRegion: 'ap-northeast-1',
                auroraCluster,
                hostedZone,
                alertingTopic
            });
            // Then
            expect(drAutomation.failoverStateMachine).toBeDefined();
            expect(drAutomation.chaosTestingStateMachine).toBeDefined();
            expect(drAutomation.drMonitoringDashboard).toBeDefined();
            template = assertions_1.Template.fromStack(stack);
            // Should create all necessary resources
            template.resourceCountIs('AWS::Lambda::Function', 2);
            template.resourceCountIs('AWS::StepFunctions::StateMachine', 2);
            template.resourceCountIs('AWS::Events::Rule', 1);
            template.resourceCountIs('AWS::CloudWatch::Dashboard', 1);
            template.resourceCountIs('AWS::IAM::Role', 1);
            template.resourceCountIs('AWS::SSM::Parameter', 1);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3lpa2Fpa2FvL2dpdC9nZW5haS1kZW1vL2luZnJhc3RydWN0dXJlL3Rlc3QvZGlzYXN0ZXItcmVjb3ZlcnktYXV0b21hdGlvbi50ZXN0LnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBQ25DLHVEQUFrRDtBQUNsRCwyQ0FBMkM7QUFDM0MsbURBQW1EO0FBQ25ELDJDQUEyQztBQUMzQyxpR0FBNEY7QUFFNUYsNkRBQTZEO0FBQzdELFNBQVMsaUJBQWlCLENBQUMsS0FBZ0IsRUFBRSxFQUFVLEVBQUUsSUFBWTtJQUNqRSxPQUFPLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1FBQ3pDLElBQUksRUFBRSxPQUFPO1FBQ2IsWUFBWSxFQUFFLFNBQVM7UUFDdkIsd0JBQXdCLEVBQUUsSUFBSTtLQUMxQixDQUFDLENBQUM7QUFDZCxDQUFDO0FBRUQsUUFBUSxDQUFDLDRCQUE0QixFQUFFLEdBQUcsRUFBRTtJQUN4QyxJQUFJLEdBQVksQ0FBQztJQUNqQixJQUFJLEtBQWdCLENBQUM7SUFDckIsSUFBSSxRQUFrQixDQUFDO0lBRXZCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDWixHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEIsS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFO1lBQ3BDLEdBQUcsRUFBRTtnQkFDRCxPQUFPLEVBQUUsY0FBYztnQkFDdkIsTUFBTSxFQUFFLGdCQUFnQjthQUMzQjtTQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBRTtRQUNoQyxJQUFJLENBQUMsa0VBQWtFLEVBQUUsR0FBRyxFQUFFO1lBQzFFLFFBQVE7WUFDUixNQUFNLGFBQWEsR0FBRyxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1lBRTVELE9BQU87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QixFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pELFFBQVEsQ0FBQyxlQUFlLENBQUMsNEJBQTRCLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDMUQsUUFBUSxDQUFDLGVBQWUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM5QyxRQUFRLENBQUMsZUFBZSxDQUFDLHFCQUFxQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMveWlrYWlrYW8vZ2l0L2dlbmFpLWRlbW8vaW5mcmFzdHJ1Y3R1cmUvdGVzdC9kaXNhc3Rlci1yZWNvdmVyeS1hdXRvbWF0aW9uLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSAnYXdzLWNkay1saWIvYXNzZXJ0aW9ucyc7XG5pbXBvcnQgKiBhcyByZHMgZnJvbSAnYXdzLWNkay1saWIvYXdzLXJkcyc7XG5pbXBvcnQgKiBhcyByb3V0ZTUzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1yb3V0ZTUzJztcbmltcG9ydCAqIGFzIHNucyBmcm9tICdhd3MtY2RrLWxpYi9hd3Mtc25zJztcbmltcG9ydCB7IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uIH0gZnJvbSAnLi4vbGliL2NvbnN0cnVjdHMvZGlzYXN0ZXItcmVjb3ZlcnktYXV0b21hdGlvbic7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgaGVhbHRoIGNoZWNrcyB3aXRoIHByb3BlciB0eXBpbmdcbmZ1bmN0aW9uIGNyZWF0ZUhlYWx0aENoZWNrKHNjb3BlOiBjZGsuU3RhY2ssIGlkOiBzdHJpbmcsIGZxZG46IHN0cmluZyk6IHJvdXRlNTMuQ2ZuSGVhbHRoQ2hlY2sge1xuICAgIHJldHVybiBuZXcgcm91dGU1My5DZm5IZWFsdGhDaGVjayhzY29wZSwgaWQsIHtcbiAgICAgICAgdHlwZTogJ0hUVFBTJyxcbiAgICAgICAgcmVzb3VyY2VQYXRoOiAnL2hlYWx0aCcsXG4gICAgICAgIGZ1bGx5UXVhbGlmaWVkRG9tYWluTmFtZTogZnFkblxuICAgIH0gYXMgYW55KTtcbn1cblxuZGVzY3JpYmUoJ0Rpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uJywgKCkgPT4ge1xuICAgIGxldCBhcHA6IGNkay5BcHA7XG4gICAgbGV0IHN0YWNrOiBjZGsuU3RhY2s7XG4gICAgbGV0IHRlbXBsYXRlOiBUZW1wbGF0ZTtcblxuICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBhcHAgPSBuZXcgY2RrLkFwcCgpO1xuICAgICAgICBzdGFjayA9IG5ldyBjZGsuU3RhY2soYXBwLCAnVGVzdFN0YWNrJywge1xuICAgICAgICAgICAgZW52OiB7XG4gICAgICAgICAgICAgICAgYWNjb3VudDogJzEyMzQ1Njc4OTAxMicsXG4gICAgICAgICAgICAgICAgcmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ0Jhc2ljIENvbnN0cnVjdGlvbicsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBEUiBhdXRvbWF0aW9uIGNvbnN0cnVjdCB3aXRoIG1pbmltYWwgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgY29uc3QgZHJBdXRvbWF0aW9uID0gbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Rlc3QnLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgZXhwZWN0KGRyQXV0b21hdGlvbikudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChkckF1dG9tYXRpb24uZmFpbG92ZXJTdGF0ZU1hY2hpbmUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoZHJBdXRvbWF0aW9uLmNoYW9zVGVzdGluZ1N0YXRlTWFjaGluZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChkckF1dG9tYXRpb24ubW9udGhseVRlc3RpbmdSdWxlKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGRyQXV0b21hdGlvbi5kck1vbml0b3JpbmdEYXNoYm9hcmQpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoZHJBdXRvbWF0aW9uLmZhaWxvdmVyTGFtYmRhKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgZXhwZWN0KGRyQXV0b21hdGlvbi5jaGFvc1Rlc3RpbmdMYW1iZGEpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgRFIgYXV0b21hdGlvbiBjb25zdHJ1Y3Qgd2l0aCBmdWxsIGNvbmZpZ3VyYXRpb24nLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBHaXZlblxuICAgICAgICAgICAgY29uc3QgYWxlcnRpbmdUb3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdBbGVydGluZ1RvcGljJyk7XG4gICAgICAgICAgICBjb25zdCBhdXJvcmFDbHVzdGVyID0gcmRzLkRhdGFiYXNlQ2x1c3Rlci5mcm9tRGF0YWJhc2VDbHVzdGVyQXR0cmlidXRlcyhzdGFjaywgJ0F1cm9yYUNsdXN0ZXInLCB7XG4gICAgICAgICAgICAgICAgY2x1c3RlcklkZW50aWZpZXI6ICd0ZXN0LWNsdXN0ZXInXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IGhvc3RlZFpvbmUgPSByb3V0ZTUzLkhvc3RlZFpvbmUuZnJvbUhvc3RlZFpvbmVBdHRyaWJ1dGVzKHN0YWNrLCAnSG9zdGVkWm9uZScsIHtcbiAgICAgICAgICAgICAgICBob3N0ZWRab25lSWQ6ICdaMTIzNDU2Nzg5JyxcbiAgICAgICAgICAgICAgICB6b25lTmFtZTogJ2V4YW1wbGUuY29tJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBwcmltYXJ5SGVhbHRoQ2hlY2sgPSBjcmVhdGVIZWFsdGhDaGVjayhzdGFjaywgJ1ByaW1hcnlIZWFsdGhDaGVjaycsICdhcGkuZXhhbXBsZS5jb20nKTtcbiAgICAgICAgICAgIGNvbnN0IHNlY29uZGFyeUhlYWx0aENoZWNrID0gY3JlYXRlSGVhbHRoQ2hlY2soc3RhY2ssICdTZWNvbmRhcnlIZWFsdGhDaGVjaycsICdhcGktZHIuZXhhbXBsZS5jb20nKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgY29uc3QgZHJBdXRvbWF0aW9uID0gbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhdXJvcmFDbHVzdGVyLFxuICAgICAgICAgICAgICAgIGhvc3RlZFpvbmUsXG4gICAgICAgICAgICAgICAgcHJpbWFyeUhlYWx0aENoZWNrLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeUhlYWx0aENoZWNrLFxuICAgICAgICAgICAgICAgIGFsZXJ0aW5nVG9waWNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICBleHBlY3QoZHJBdXRvbWF0aW9uKS50b0JlRGVmaW5lZCgpO1xuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuXG4gICAgICAgICAgICAvLyBWZXJpZnkgTGFtYmRhIGZ1bmN0aW9ucyBhcmUgY3JlYXRlZFxuICAgICAgICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgRnVuY3Rpb25OYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tZHItZmFpbG92ZXInXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgRnVuY3Rpb25OYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tZHItY2hhb3MtdGVzdGluZydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdMYW1iZGEgRnVuY3Rpb25zJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGZhaWxvdmVyIExhbWJkYSB3aXRoIGNvcnJlY3QgY29uZmlndXJhdGlvbicsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuICAgICAgICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkxhbWJkYTo6RnVuY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgRnVuY3Rpb25OYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tZHItZmFpbG92ZXInLFxuICAgICAgICAgICAgICAgIFJ1bnRpbWU6ICdweXRob24zLjExJyxcbiAgICAgICAgICAgICAgICBIYW5kbGVyOiAnaW5kZXguaGFuZGxlcicsXG4gICAgICAgICAgICAgICAgVGltZW91dDogOTAwLCAvLyAxNSBtaW51dGVzXG4gICAgICAgICAgICAgICAgTWVtb3J5U2l6ZTogNTEyLFxuICAgICAgICAgICAgICAgIEVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIFZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVF9OQU1FOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVOVklST05NRU5UOiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBQUklNQVJZX1JFR0lPTjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBTRUNPTkRBUllfUkVHSU9OOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgTE9HX0xFVkVMOiAnSU5GTydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGNoYW9zIHRlc3RpbmcgTGFtYmRhIHdpdGggY29ycmVjdCBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2l2ZW5cbiAgICAgICAgICAgIGNvbnN0IGFsZXJ0aW5nVG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnQWxlcnRpbmdUb3BpYycpO1xuXG4gICAgICAgICAgICAvLyBXaGVuXG4gICAgICAgICAgICBuZXcgRGlzYXN0ZXJSZWNvdmVyeUF1dG9tYXRpb24oc3RhY2ssICdEUkF1dG9tYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdE5hbWU6ICd0ZXN0LXByb2plY3QnLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgcHJpbWFyeVJlZ2lvbjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5UmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgIGFsZXJ0aW5nVG9waWNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21TdGFjayhzdGFjayk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbicsIHtcbiAgICAgICAgICAgICAgICBGdW5jdGlvbk5hbWU6ICd0ZXN0LXByb2plY3QtcHJvZHVjdGlvbi1kci1jaGFvcy10ZXN0aW5nJyxcbiAgICAgICAgICAgICAgICBSdW50aW1lOiAncHl0aG9uMy4xMScsXG4gICAgICAgICAgICAgICAgSGFuZGxlcjogJ2luZGV4LmhhbmRsZXInLFxuICAgICAgICAgICAgICAgIFRpbWVvdXQ6IDE4MDAsIC8vIDMwIG1pbnV0ZXNcbiAgICAgICAgICAgICAgICBNZW1vcnlTaXplOiAxMDI0LFxuICAgICAgICAgICAgICAgIEVudmlyb25tZW50OiB7XG4gICAgICAgICAgICAgICAgICAgIFZhcmlhYmxlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgUFJPSkVDVF9OQU1FOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgIEVOVklST05NRU5UOiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICBQUklNQVJZX1JFR0lPTjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgICAgICAgICBTRUNPTkRBUllfUkVHSU9OOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgTE9HX0xFVkVMOiAnSU5GTydcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdTdGVwIEZ1bmN0aW9ucyBTdGF0ZSBNYWNoaW5lcycsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBmYWlsb3ZlciBzdGF0ZSBtYWNoaW5lJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2l2ZW5cbiAgICAgICAgICAgIGNvbnN0IGFsZXJ0aW5nVG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnQWxlcnRpbmdUb3BpYycpO1xuXG4gICAgICAgICAgICAvLyBXaGVuXG4gICAgICAgICAgICBuZXcgRGlzYXN0ZXJSZWNvdmVyeUF1dG9tYXRpb24oc3RhY2ssICdEUkF1dG9tYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdE5hbWU6ICd0ZXN0LXByb2plY3QnLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgcHJpbWFyeVJlZ2lvbjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5UmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgIGFsZXJ0aW5nVG9waWNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21TdGFjayhzdGFjayk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywge1xuICAgICAgICAgICAgICAgIFN0YXRlTWFjaGluZU5hbWU6ICd0ZXN0LXByb2plY3QtcHJvZHVjdGlvbi1kci1mYWlsb3ZlcicsXG4gICAgICAgICAgICAgICAgQ29tbWVudDogJ0F1dG9tYXRlZCBkaXNhc3RlciByZWNvdmVyeSBmYWlsb3ZlciB3b3JrZmxvdydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcblxuICAgICAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIGNoYW9zIHRlc3Rpbmcgc3RhdGUgbWFjaGluZScsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuICAgICAgICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OlN0ZXBGdW5jdGlvbnM6OlN0YXRlTWFjaGluZScsIHtcbiAgICAgICAgICAgICAgICBTdGF0ZU1hY2hpbmVOYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tZHItY2hhb3MtdGVzdGluZycsXG4gICAgICAgICAgICAgICAgQ29tbWVudDogJ0F1dG9tYXRlZCBjaGFvcyBlbmdpbmVlcmluZyBhbmQgRFIgdGVzdGluZyB3b3JrZmxvdydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdFdmVudEJyaWRnZSBSdWxlcycsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBtb250aGx5IHRlc3RpbmcgcnVsZScsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuICAgICAgICAgICAgdGVtcGxhdGUuaGFzUmVzb3VyY2VQcm9wZXJ0aWVzKCdBV1M6OkV2ZW50czo6UnVsZScsIHtcbiAgICAgICAgICAgICAgICBOYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tbW9udGhseS1kci10ZXN0JyxcbiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbjogJ1RyaWdnZXIgbW9udGhseSBEUiB0ZXN0aW5nIG9uIHRoZSBmaXJzdCBTdW5kYXkgb2YgZWFjaCBtb250aCcsXG4gICAgICAgICAgICAgICAgU2NoZWR1bGVFeHByZXNzaW9uOiAnY3JvbigwIDIgPyAqIFNVTiMxICopJyxcbiAgICAgICAgICAgICAgICBTdGF0ZTogJ0VOQUJMRUQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnQ2xvdWRXYXRjaCBEYXNoYm9hcmQnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgRFIgbW9uaXRvcmluZyBkYXNoYm9hcmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBHaXZlblxuICAgICAgICAgICAgY29uc3QgYWxlcnRpbmdUb3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdBbGVydGluZ1RvcGljJyk7XG5cbiAgICAgICAgICAgIC8vIFdoZW5cbiAgICAgICAgICAgIG5ldyBEaXNhc3RlclJlY292ZXJ5QXV0b21hdGlvbihzdGFjaywgJ0RSQXV0b21hdGlvbicsIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0TmFtZTogJ3Rlc3QtcHJvamVjdCcsXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgICAgICAgICBwcmltYXJ5UmVnaW9uOiAnYXAtZWFzdC0yJyxcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlSZWdpb246ICdhcC1ub3J0aGVhc3QtMScsXG4gICAgICAgICAgICAgICAgYWxlcnRpbmdUb3BpY1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRoZW5cbiAgICAgICAgICAgIHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcbiAgICAgICAgICAgIHRlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpDbG91ZFdhdGNoOjpEYXNoYm9hcmQnLCB7XG4gICAgICAgICAgICAgICAgRGFzaGJvYXJkTmFtZTogJ3Rlc3QtcHJvamVjdC1wcm9kdWN0aW9uLWRyLWF1dG9tYXRpb24tbW9uaXRvcmluZydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdJQU0gUm9sZXMgYW5kIFBvbGljaWVzJywgKCkgPT4ge1xuICAgICAgICB0ZXN0KCdzaG91bGQgY3JlYXRlIERSIGF1dG9tYXRpb24gcm9sZSB3aXRoIGNvcnJlY3QgcGVybWlzc2lvbnMnLCAoKSA9PiB7XG4gICAgICAgICAgICAvLyBHaXZlblxuICAgICAgICAgICAgY29uc3QgYWxlcnRpbmdUb3BpYyA9IG5ldyBzbnMuVG9waWMoc3RhY2ssICdBbGVydGluZ1RvcGljJyk7XG5cbiAgICAgICAgICAgIC8vIFdoZW5cbiAgICAgICAgICAgIG5ldyBEaXNhc3RlclJlY292ZXJ5QXV0b21hdGlvbihzdGFjaywgJ0RSQXV0b21hdGlvbicsIHtcbiAgICAgICAgICAgICAgICBwcm9qZWN0TmFtZTogJ3Rlc3QtcHJvamVjdCcsXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnQ6ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgICAgICAgICBwcmltYXJ5UmVnaW9uOiAnYXAtZWFzdC0yJyxcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlSZWdpb246ICdhcC1ub3J0aGVhc3QtMScsXG4gICAgICAgICAgICAgICAgYWxlcnRpbmdUb3BpY1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRoZW5cbiAgICAgICAgICAgIHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcbiAgICAgICAgICAgIHRlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpJQU06OlJvbGUnLCB7XG4gICAgICAgICAgICAgICAgUm9sZU5hbWU6ICd0ZXN0LXByb2plY3QtcHJvZHVjdGlvbi1kci1hdXRvbWF0aW9uLXJvbGUnLFxuICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uOiAnSUFNIHJvbGUgZm9yIGRpc2FzdGVyIHJlY292ZXJ5IGF1dG9tYXRpb24gb3BlcmF0aW9ucydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdTeXN0ZW1zIE1hbmFnZXIgUGFyYW1ldGVycycsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBEUiBhdXRvbWF0aW9uIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVyJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gR2l2ZW5cbiAgICAgICAgICAgIGNvbnN0IGFsZXJ0aW5nVG9waWMgPSBuZXcgc25zLlRvcGljKHN0YWNrLCAnQWxlcnRpbmdUb3BpYycpO1xuXG4gICAgICAgICAgICAvLyBXaGVuXG4gICAgICAgICAgICBuZXcgRGlzYXN0ZXJSZWNvdmVyeUF1dG9tYXRpb24oc3RhY2ssICdEUkF1dG9tYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdE5hbWU6ICd0ZXN0LXByb2plY3QnLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgcHJpbWFyeVJlZ2lvbjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5UmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgIGFsZXJ0aW5nVG9waWNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBUaGVuXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21TdGFjayhzdGFjayk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6U1NNOjpQYXJhbWV0ZXInLCB7XG4gICAgICAgICAgICAgICAgTmFtZTogJy90ZXN0LXByb2plY3QvcHJvZHVjdGlvbi9kci9hdXRvbWF0aW9uLWNvbmZpZycsXG4gICAgICAgICAgICAgICAgRGVzY3JpcHRpb246ICdFbmhhbmNlZCBEUiBhdXRvbWF0aW9uIGNvbmZpZ3VyYXRpb24gZm9yIHRlc3QtcHJvamVjdCBwcm9kdWN0aW9uJyxcbiAgICAgICAgICAgICAgICBUaWVyOiAnU3RhbmRhcmQnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnSGVhbHRoIENoZWNrIE1vbml0b3JpbmcnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBjcmVhdGUgaGVhbHRoIGNoZWNrIG1vbml0b3Jpbmcgd2hlbiBoZWFsdGggY2hlY2tzIGFyZSBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcbiAgICAgICAgICAgIGNvbnN0IHByaW1hcnlIZWFsdGhDaGVjayA9IGNyZWF0ZUhlYWx0aENoZWNrKHN0YWNrLCAnUHJpbWFyeUhlYWx0aENoZWNrJywgJ2FwaS5leGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgY29uc3Qgc2Vjb25kYXJ5SGVhbHRoQ2hlY2sgPSBjcmVhdGVIZWFsdGhDaGVjayhzdGFjaywgJ1NlY29uZGFyeUhlYWx0aENoZWNrJywgJ2FwaS1kci5leGFtcGxlLmNvbScpO1xuXG4gICAgICAgICAgICAvLyBXaGVuXG4gICAgICAgICAgICBuZXcgRGlzYXN0ZXJSZWNvdmVyeUF1dG9tYXRpb24oc3RhY2ssICdEUkF1dG9tYXRpb24nLCB7XG4gICAgICAgICAgICAgICAgcHJvamVjdE5hbWU6ICd0ZXN0LXByb2plY3QnLFxuICAgICAgICAgICAgICAgIGVudmlyb25tZW50OiAncHJvZHVjdGlvbicsXG4gICAgICAgICAgICAgICAgcHJpbWFyeVJlZ2lvbjogJ2FwLWVhc3QtMicsXG4gICAgICAgICAgICAgICAgc2Vjb25kYXJ5UmVnaW9uOiAnYXAtbm9ydGhlYXN0LTEnLFxuICAgICAgICAgICAgICAgIHByaW1hcnlIZWFsdGhDaGVjayxcbiAgICAgICAgICAgICAgICBzZWNvbmRhcnlIZWFsdGhDaGVjayxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuXG4gICAgICAgICAgICAvLyBTaG91bGQgY3JlYXRlIGFsYXJtIGZvciBwcmltYXJ5IGhlYWx0aCBjaGVjayBmYWlsdXJlXG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoJ0FXUzo6Q2xvdWRXYXRjaDo6QWxhcm0nLCB7XG4gICAgICAgICAgICAgICAgQWxhcm1OYW1lOiAndGVzdC1wcm9qZWN0LXByb2R1Y3Rpb24tcHJpbWFyeS1oZWFsdGgtY2hlY2stZmFpbHVyZS1hdXRvbWF0ZWQnLFxuICAgICAgICAgICAgICAgIEFsYXJtRGVzY3JpcHRpb246ICdQcmltYXJ5IHJlZ2lvbiBoZWFsdGggY2hlY2sgZmFpbHVyZSAtIHRyaWdnZXJzIGF1dG9tYXRlZCBmYWlsb3ZlcicsXG4gICAgICAgICAgICAgICAgQ29tcGFyaXNvbk9wZXJhdG9yOiAnTGVzc1RoYW5UaHJlc2hvbGQnLFxuICAgICAgICAgICAgICAgIFRocmVzaG9sZDogMSxcbiAgICAgICAgICAgICAgICBFdmFsdWF0aW9uUGVyaW9kczogMyxcbiAgICAgICAgICAgICAgICBUcmVhdE1pc3NpbmdEYXRhOiAnYnJlYWNoaW5nJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFNob3VsZCBjcmVhdGUgRXZlbnRCcmlkZ2UgcnVsZSBmb3IgYXV0b21hdGVkIGZhaWxvdmVyIHRyaWdnZXJcbiAgICAgICAgICAgIHRlbXBsYXRlLmhhc1Jlc291cmNlUHJvcGVydGllcygnQVdTOjpFdmVudHM6OlJ1bGUnLCB7XG4gICAgICAgICAgICAgICAgTmFtZTogJ3Rlc3QtcHJvamVjdC1wcm9kdWN0aW9uLWF1dG9tYXRlZC1mYWlsb3Zlci10cmlnZ2VyJyxcbiAgICAgICAgICAgICAgICBEZXNjcmlwdGlvbjogJ1RyaWdnZXIgYXV0b21hdGVkIGZhaWxvdmVyIHdoZW4gcHJpbWFyeSBoZWFsdGggY2hlY2sgZmFpbHMnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnT3V0cHV0cycsICgpID0+IHtcbiAgICAgICAgdGVzdCgnc2hvdWxkIGNyZWF0ZSBhbGwgcmVxdWlyZWQgb3V0cHV0cycsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhbGVydGluZ1RvcGljXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVGhlblxuICAgICAgICAgICAgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xuXG4gICAgICAgICAgICAvLyBDaGVjayBmb3Igb3V0cHV0c1xuICAgICAgICAgICAgdGVtcGxhdGUuaGFzT3V0cHV0KCdGYWlsb3ZlclN0YXRlTWFjaGluZUFybicsIHt9KTtcbiAgICAgICAgICAgIHRlbXBsYXRlLmhhc091dHB1dCgnQ2hhb3NUZXN0aW5nU3RhdGVNYWNoaW5lQXJuJywge30pO1xuICAgICAgICAgICAgdGVtcGxhdGUuaGFzT3V0cHV0KCdNb250aGx5VGVzdGluZ1J1bGVBcm4nLCB7fSk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNPdXRwdXQoJ0RSTW9uaXRvcmluZ0Rhc2hib2FyZFVybCcsIHt9KTtcbiAgICAgICAgICAgIHRlbXBsYXRlLmhhc091dHB1dCgnRmFpbG92ZXJMYW1iZGFBcm4nLCB7fSk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5oYXNPdXRwdXQoJ0NoYW9zVGVzdGluZ0xhbWJkYUFybicsIHt9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZSgnSW50ZWdyYXRpb24gVGVzdHMnLCAoKSA9PiB7XG4gICAgICAgIHRlc3QoJ3Nob3VsZCBpbnRlZ3JhdGUgcHJvcGVybHkgd2l0aCBleGlzdGluZyBpbmZyYXN0cnVjdHVyZScsICgpID0+IHtcbiAgICAgICAgICAgIC8vIEdpdmVuXG4gICAgICAgICAgICBjb25zdCBhbGVydGluZ1RvcGljID0gbmV3IHNucy5Ub3BpYyhzdGFjaywgJ0FsZXJ0aW5nVG9waWMnKTtcbiAgICAgICAgICAgIGNvbnN0IGF1cm9yYUNsdXN0ZXIgPSByZHMuRGF0YWJhc2VDbHVzdGVyLmZyb21EYXRhYmFzZUNsdXN0ZXJBdHRyaWJ1dGVzKHN0YWNrLCAnQXVyb3JhQ2x1c3RlcicsIHtcbiAgICAgICAgICAgICAgICBjbHVzdGVySWRlbnRpZmllcjogJ3Rlc3QtY2x1c3RlcidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgaG9zdGVkWm9uZSA9IHJvdXRlNTMuSG9zdGVkWm9uZS5mcm9tSG9zdGVkWm9uZUF0dHJpYnV0ZXMoc3RhY2ssICdIb3N0ZWRab25lJywge1xuICAgICAgICAgICAgICAgIGhvc3RlZFpvbmVJZDogJ1oxMjM0NTY3ODknLFxuICAgICAgICAgICAgICAgIHpvbmVOYW1lOiAnZXhhbXBsZS5jb20nXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gV2hlblxuICAgICAgICAgICAgY29uc3QgZHJBdXRvbWF0aW9uID0gbmV3IERpc2FzdGVyUmVjb3ZlcnlBdXRvbWF0aW9uKHN0YWNrLCAnRFJBdXRvbWF0aW9uJywge1xuICAgICAgICAgICAgICAgIHByb2plY3ROYW1lOiAndGVzdC1wcm9qZWN0JyxcbiAgICAgICAgICAgICAgICBlbnZpcm9ubWVudDogJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgICAgICAgIHByaW1hcnlSZWdpb246ICdhcC1lYXN0LTInLFxuICAgICAgICAgICAgICAgIHNlY29uZGFyeVJlZ2lvbjogJ2FwLW5vcnRoZWFzdC0xJyxcbiAgICAgICAgICAgICAgICBhdXJvcmFDbHVzdGVyLFxuICAgICAgICAgICAgICAgIGhvc3RlZFpvbmUsXG4gICAgICAgICAgICAgICAgYWxlcnRpbmdUb3BpY1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFRoZW5cbiAgICAgICAgICAgIGV4cGVjdChkckF1dG9tYXRpb24uZmFpbG92ZXJTdGF0ZU1hY2hpbmUpLnRvQmVEZWZpbmVkKCk7XG4gICAgICAgICAgICBleHBlY3QoZHJBdXRvbWF0aW9uLmNoYW9zVGVzdGluZ1N0YXRlTWFjaGluZSkudG9CZURlZmluZWQoKTtcbiAgICAgICAgICAgIGV4cGVjdChkckF1dG9tYXRpb24uZHJNb25pdG9yaW5nRGFzaGJvYXJkKS50b0JlRGVmaW5lZCgpO1xuXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IFRlbXBsYXRlLmZyb21TdGFjayhzdGFjayk7XG5cbiAgICAgICAgICAgIC8vIFNob3VsZCBjcmVhdGUgYWxsIG5lY2Vzc2FyeSByZXNvdXJjZXNcbiAgICAgICAgICAgIHRlbXBsYXRlLnJlc291cmNlQ291bnRJcygnQVdTOjpMYW1iZGE6OkZ1bmN0aW9uJywgMik7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6U3RlcEZ1bmN0aW9uczo6U3RhdGVNYWNoaW5lJywgMik7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6RXZlbnRzOjpSdWxlJywgMSk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6Q2xvdWRXYXRjaDo6RGFzaGJvYXJkJywgMSk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6SUFNOjpSb2xlJywgMSk7XG4gICAgICAgICAgICB0ZW1wbGF0ZS5yZXNvdXJjZUNvdW50SXMoJ0FXUzo6U1NNOjpQYXJhbWV0ZXInLCAxKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59KTsiXSwidmVyc2lvbiI6M30=