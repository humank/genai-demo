{"file":"/Users/yikaikao/git/genai-demo/infrastructure/test/disaster-recovery-automation.test.ts","mappings":"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","names":[],"sources":["/Users/yikaikao/git/genai-demo/infrastructure/test/disaster-recovery-automation.test.ts"],"sourcesContent":["import * as cdk from 'aws-cdk-lib';\nimport { Template } from 'aws-cdk-lib/assertions';\nimport * as rds from 'aws-cdk-lib/aws-rds';\nimport * as route53 from 'aws-cdk-lib/aws-route53';\nimport * as sns from 'aws-cdk-lib/aws-sns';\nimport { DisasterRecoveryAutomation } from '../lib/constructs/disaster-recovery-automation';\n\n// Helper function to create health checks with proper typing\nfunction createHealthCheck(scope: cdk.Stack, id: string, fqdn: string): route53.CfnHealthCheck {\n    return new route53.CfnHealthCheck(scope, id, {\n        type: 'HTTPS',\n        resourcePath: '/health',\n        fullyQualifiedDomainName: fqdn\n    } as any);\n}\n\ndescribe('DisasterRecoveryAutomation', () => {\n    let app: cdk.App;\n    let stack: cdk.Stack;\n    let template: Template;\n\n    beforeEach(() => {\n        app = new cdk.App();\n        stack = new cdk.Stack(app, 'TestStack', {\n            env: {\n                account: '123456789012',\n                region: 'ap-northeast-1'\n            }\n        });\n    });\n\n    describe('Basic Construction', () => {\n        test('should create DR automation construct with minimal configuration', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            const drAutomation = new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'test',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            expect(drAutomation).toBeDefined();\n            expect(drAutomation.failoverStateMachine).toBeDefined();\n            expect(drAutomation.chaosTestingStateMachine).toBeDefined();\n            expect(drAutomation.monthlyTestingRule).toBeDefined();\n            expect(drAutomation.drMonitoringDashboard).toBeDefined();\n            expect(drAutomation.failoverLambda).toBeDefined();\n            expect(drAutomation.chaosTestingLambda).toBeDefined();\n        });\n\n        test('should create DR automation construct with full configuration', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n            const auroraCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'AuroraCluster', {\n                clusterIdentifier: 'test-cluster'\n            });\n            const hostedZone = route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {\n                hostedZoneId: 'Z123456789',\n                zoneName: 'example.com'\n            });\n            const primaryHealthCheck = createHealthCheck(stack, 'PrimaryHealthCheck', 'api.example.com');\n            const secondaryHealthCheck = createHealthCheck(stack, 'SecondaryHealthCheck', 'api-dr.example.com');\n\n            // When\n            const drAutomation = new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                auroraCluster,\n                hostedZone,\n                primaryHealthCheck,\n                secondaryHealthCheck,\n                alertingTopic\n            });\n\n            // Then\n            expect(drAutomation).toBeDefined();\n            template = Template.fromStack(stack);\n\n            // Verify Lambda functions are created\n            template.hasResourceProperties('AWS::Lambda::Function', {\n                FunctionName: 'test-project-production-dr-failover'\n            });\n\n            template.hasResourceProperties('AWS::Lambda::Function', {\n                FunctionName: 'test-project-production-dr-chaos-testing'\n            });\n        });\n    });\n\n    describe('Lambda Functions', () => {\n        test('should create failover Lambda with correct configuration', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::Lambda::Function', {\n                FunctionName: 'test-project-production-dr-failover',\n                Runtime: 'python3.11',\n                Handler: 'index.handler',\n                Timeout: 900, // 15 minutes\n                MemorySize: 512,\n                Environment: {\n                    Variables: {\n                        PROJECT_NAME: 'test-project',\n                        ENVIRONMENT: 'production',\n                        PRIMARY_REGION: 'ap-east-2',\n                        SECONDARY_REGION: 'ap-northeast-1',\n                        LOG_LEVEL: 'INFO'\n                    }\n                }\n            });\n        });\n\n        test('should create chaos testing Lambda with correct configuration', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::Lambda::Function', {\n                FunctionName: 'test-project-production-dr-chaos-testing',\n                Runtime: 'python3.11',\n                Handler: 'index.handler',\n                Timeout: 1800, // 30 minutes\n                MemorySize: 1024,\n                Environment: {\n                    Variables: {\n                        PROJECT_NAME: 'test-project',\n                        ENVIRONMENT: 'production',\n                        PRIMARY_REGION: 'ap-east-2',\n                        SECONDARY_REGION: 'ap-northeast-1',\n                        LOG_LEVEL: 'INFO'\n                    }\n                }\n            });\n        });\n    });\n\n    describe('Step Functions State Machines', () => {\n        test('should create failover state machine', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::StepFunctions::StateMachine', {\n                StateMachineName: 'test-project-production-dr-failover',\n                Comment: 'Automated disaster recovery failover workflow'\n            });\n        });\n\n        test('should create chaos testing state machine', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::StepFunctions::StateMachine', {\n                StateMachineName: 'test-project-production-dr-chaos-testing',\n                Comment: 'Automated chaos engineering and DR testing workflow'\n            });\n        });\n    });\n\n    describe('EventBridge Rules', () => {\n        test('should create monthly testing rule', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::Events::Rule', {\n                Name: 'test-project-production-monthly-dr-test',\n                Description: 'Trigger monthly DR testing on the first Sunday of each month',\n                ScheduleExpression: 'cron(0 2 ? * SUN#1 *)',\n                State: 'ENABLED'\n            });\n        });\n    });\n\n    describe('CloudWatch Dashboard', () => {\n        test('should create DR monitoring dashboard', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::CloudWatch::Dashboard', {\n                DashboardName: 'test-project-production-dr-automation-monitoring'\n            });\n        });\n    });\n\n    describe('IAM Roles and Policies', () => {\n        test('should create DR automation role with correct permissions', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::IAM::Role', {\n                RoleName: 'test-project-production-dr-automation-role',\n                Description: 'IAM role for disaster recovery automation operations'\n            });\n        });\n    });\n\n    describe('Systems Manager Parameters', () => {\n        test('should create DR automation configuration parameter', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n            template.hasResourceProperties('AWS::SSM::Parameter', {\n                Name: '/test-project/production/dr/automation-config',\n                Description: 'Enhanced DR automation configuration for test-project production',\n                Tier: 'Standard'\n            });\n        });\n    });\n\n    describe('Health Check Monitoring', () => {\n        test('should create health check monitoring when health checks are provided', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n            const primaryHealthCheck = createHealthCheck(stack, 'PrimaryHealthCheck', 'api.example.com');\n            const secondaryHealthCheck = createHealthCheck(stack, 'SecondaryHealthCheck', 'api-dr.example.com');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                primaryHealthCheck,\n                secondaryHealthCheck,\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n\n            // Should create alarm for primary health check failure\n            template.hasResourceProperties('AWS::CloudWatch::Alarm', {\n                AlarmName: 'test-project-production-primary-health-check-failure-automated',\n                AlarmDescription: 'Primary region health check failure - triggers automated failover',\n                ComparisonOperator: 'LessThanThreshold',\n                Threshold: 1,\n                EvaluationPeriods: 3,\n                TreatMissingData: 'breaching'\n            });\n\n            // Should create EventBridge rule for automated failover trigger\n            template.hasResourceProperties('AWS::Events::Rule', {\n                Name: 'test-project-production-automated-failover-trigger',\n                Description: 'Trigger automated failover when primary health check fails'\n            });\n        });\n    });\n\n    describe('Outputs', () => {\n        test('should create all required outputs', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n\n            // When\n            new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                alertingTopic\n            });\n\n            // Then\n            template = Template.fromStack(stack);\n\n            // Check for outputs\n            template.hasOutput('FailoverStateMachineArn', {});\n            template.hasOutput('ChaosTestingStateMachineArn', {});\n            template.hasOutput('MonthlyTestingRuleArn', {});\n            template.hasOutput('DRMonitoringDashboardUrl', {});\n            template.hasOutput('FailoverLambdaArn', {});\n            template.hasOutput('ChaosTestingLambdaArn', {});\n        });\n    });\n\n    describe('Integration Tests', () => {\n        test('should integrate properly with existing infrastructure', () => {\n            // Given\n            const alertingTopic = new sns.Topic(stack, 'AlertingTopic');\n            const auroraCluster = rds.DatabaseCluster.fromDatabaseClusterAttributes(stack, 'AuroraCluster', {\n                clusterIdentifier: 'test-cluster'\n            });\n            const hostedZone = route53.HostedZone.fromHostedZoneAttributes(stack, 'HostedZone', {\n                hostedZoneId: 'Z123456789',\n                zoneName: 'example.com'\n            });\n\n            // When\n            const drAutomation = new DisasterRecoveryAutomation(stack, 'DRAutomation', {\n                projectName: 'test-project',\n                environment: 'production',\n                primaryRegion: 'ap-east-2',\n                secondaryRegion: 'ap-northeast-1',\n                auroraCluster,\n                hostedZone,\n                alertingTopic\n            });\n\n            // Then\n            expect(drAutomation.failoverStateMachine).toBeDefined();\n            expect(drAutomation.chaosTestingStateMachine).toBeDefined();\n            expect(drAutomation.drMonitoringDashboard).toBeDefined();\n\n            template = Template.fromStack(stack);\n\n            // Should create all necessary resources\n            template.resourceCountIs('AWS::Lambda::Function', 2);\n            template.resourceCountIs('AWS::StepFunctions::StateMachine', 2);\n            template.resourceCountIs('AWS::Events::Rule', 1);\n            template.resourceCountIs('AWS::CloudWatch::Dashboard', 1);\n            template.resourceCountIs('AWS::IAM::Role', 1);\n            template.resourceCountIs('AWS::SSM::Parameter', 1);\n        });\n    });\n});"],"version":3}