apiVersion: apps/v1
kind: Deployment
metadata:
  name: adot-collector
  namespace: observability
  labels:
    app: adot-collector
spec:
  replicas: 2
  selector:
    matchLabels:
      app: adot-collector
  template:
    metadata:
      labels:
        app: adot-collector
    spec:
      serviceAccountName: adot-collector
      containers:
      - name: adot-collector
        image: public.ecr.aws/aws-observability/aws-otel-collector:v0.35.0
        command:
        - "/awscollector"
        - "--config=/conf/adot-config.yaml"
        ports:
        - containerPort: 4317
          name: otlp-grpc
        - containerPort: 4318
          name: otlp-http
        - containerPort: 8888
          name: metrics
        - containerPort: 13133
          name: health
        env:
        - name: AWS_REGION
          value: ${AWS_REGION}
        - name: AWS_PROMETHEUS_ENDPOINT
          value: ${PROMETHEUS_ENDPOINT}
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 13133
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: config-volume
          mountPath: /conf
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: adot-collector-config

---
apiVersion: v1
kind: Service
metadata:
  name: adot-collector
  namespace: observability
  labels:
    app: adot-collector
spec:
  type: ClusterIP
  ports:
  - port: 4317
    targetPort: 4317
    name: otlp-grpc
  - port: 4318
    targetPort: 4318
    name: otlp-http
  - port: 8888
    targetPort: 8888
    name: metrics
  - port: 13133
    targetPort: 13133
    name: health
  selector:
    app: adot-collector

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: adot-collector-config
  namespace: observability
data:
  adot-config.yaml: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      
      prometheus:
        config:
          scrape_configs:
          - job_name: 'genai-demo'
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              action: keep
              regex: true
            - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              action: replace
              target_label: __metrics_path__
              regex: (.+)
            - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
              action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $1:$2
              target_label: __address__

    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
      
      resource:
        attributes:
        - key: cloud.provider
          value: aws
          action: upsert
        - key: cloud.platform
          value: aws_eks
          action: upsert
        - key: cloud.region
          from_attribute: AWS_REGION
          action: upsert
      
      resourcedetection:
        detectors: [env, eks, ec2]
        timeout: 2s
        override: false

    exporters:
      awsxray:
        region: ${AWS_REGION}
        no_verify_ssl: false
        local_mode: false
      
      awscloudwatchmetrics:
        region: ${AWS_REGION}
        namespace: GenAIDemo/ADOT
        dimension_rollup_option: NoDimensionRollup
        metric_declarations:
        - dimensions: [[service.name], [service.name, service.version]]
          metric_name_selectors:
          - ".*"

      prometheusremotewrite:
        endpoint: ${AWS_PROMETHEUS_ENDPOINT}
        auth:
          authenticator: sigv4auth
        resource_to_telemetry_conversion:
          enabled: true

    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      
      sigv4auth:
        region: ${AWS_REGION}
        service: aps

    service:
      extensions: [health_check, sigv4auth]
      pipelines:
        traces:
          receivers: [otlp]
          processors: [resourcedetection, resource, batch]
          exporters: [awsxray]
        
        metrics:
          receivers: [otlp, prometheus]
          processors: [resourcedetection, resource, batch]
          exporters: [awscloudwatchmetrics, prometheusremotewrite]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: adot-collector
  namespace: observability
  annotations:
    eks.amazonaws.com/role-arn: ${ADOT_COLLECTOR_ROLE_ARN}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: adot-collector
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "endpoints", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["replicasets", "deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: adot-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: adot-collector
subjects:
- kind: ServiceAccount
  name: adot-collector
  namespace: observability