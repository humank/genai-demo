apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-service:9090
        isDefault: true
        editable: true
      - name: CloudWatch
        type: cloudwatch
        access: proxy
        jsonData:
          authType: default
          defaultRegion: ap-northeast-1
        editable: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-genai-demo
  namespace: monitoring
data:
  genai-demo-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GenAI Demo Application Dashboard",
        "tags": ["genai-demo", "spring-boot", "business-metrics"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Application Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"genai-demo-app\"}",
                "legendFormat": "Application Status"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "HTTP Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_server_requests_total{job=\"genai-demo-app\"}[5m])",
                "legendFormat": "{{method}} {{uri}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "HTTP Response Time (95th percentile)",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_server_requests_duration_seconds_bucket{job=\"genai-demo-app\"}[5m]))",
                "legendFormat": "95th percentile"
              }
            ],
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 4,
            "title": "Business Metrics - Customer Registrations",
            "type": "stat",
            "targets": [
              {
                "expr": "business_customer_registrations_total",
                "legendFormat": "Total Registrations"
              }
            ],
            "gridPos": {"h": 6, "w": 6, "x": 0, "y": 8}
          },
          {
            "id": 5,
            "title": "Business Metrics - Order Submissions",
            "type": "stat",
            "targets": [
              {
                "expr": "business_order_submissions_total",
                "legendFormat": "Total Orders"
              }
            ],
            "gridPos": {"h": 6, "w": 6, "x": 6, "y": 8}
          },
          {
            "id": 6,
            "title": "Business Metrics - Payment Success Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "business_payment_successes_total / (business_payment_successes_total + business_payment_failures_total) * 100",
                "legendFormat": "Success Rate %"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "unit": "percent",
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "yellow", "value": 90},
                    {"color": "green", "value": 95}
                  ]
                }
              }
            },
            "gridPos": {"h": 6, "w": 6, "x": 12, "y": 8}
          },
          {
            "id": 7,
            "title": "Active Customers",
            "type": "stat",
            "targets": [
              {
                "expr": "business_customer_active",
                "legendFormat": "Active Customers"
              }
            ],
            "gridPos": {"h": 6, "w": 6, "x": 18, "y": 8}
          },
          {
            "id": 8,
            "title": "Domain Events Published",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(domain_events_published_total[5m])",
                "legendFormat": "{{event_type}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 14}
          },
          {
            "id": 9,
            "title": "Application Service Response Times",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(application_service_execution_time_seconds_bucket[5m]))",
                "legendFormat": "{{class}}.{{method}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 14}
          },
          {
            "id": 10,
            "title": "JVM Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "jvm_memory_used_bytes{job=\"genai-demo-app\"}",
                "legendFormat": "{{area}} - {{id}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 22}
          },
          {
            "id": 11,
            "title": "Database Connection Pool",
            "type": "graph",
            "targets": [
              {
                "expr": "hikaricp_connections_active{job=\"genai-demo-app\"}",
                "legendFormat": "Active Connections"
              },
              {
                "expr": "hikaricp_connections_idle{job=\"genai-demo-app\"}",
                "legendFormat": "Idle Connections"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 22}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-infrastructure
  namespace: monitoring
data:
  infrastructure-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Infrastructure Monitoring Dashboard",
        "tags": ["infrastructure", "kubernetes", "aws"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Cluster CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - (avg by (instance) (rate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Cluster Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "{{instance}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "id": 3,
            "title": "Pod CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_cpu_usage_seconds_total{namespace=\"genai-demo\"}[5m])",
                "legendFormat": "{{pod}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 4,
            "title": "Pod Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "container_memory_usage_bytes{namespace=\"genai-demo\"}",
                "legendFormat": "{{pod}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          },
          {
            "id": 5,
            "title": "Network I/O",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(container_network_receive_bytes_total{namespace=\"genai-demo\"}[5m])",
                "legendFormat": "{{pod}} - Receive"
              },
              {
                "expr": "rate(container_network_transmit_bytes_total{namespace=\"genai-demo\"}[5m])",
                "legendFormat": "{{pod}} - Transmit"
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 16}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.2.0
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin123"  # Change this in production
            - name: GF_INSTALL_PLUGINS
              value: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel"
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: grafana-dashboard-genai-demo
              mountPath: /var/lib/grafana/dashboards/genai-demo-dashboard.json
              subPath: genai-demo-dashboard.json
            - name: grafana-dashboard-infrastructure
              mountPath: /var/lib/grafana/dashboards/infrastructure-dashboard.json
              subPath: infrastructure-dashboard.json
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: grafana-dashboard-genai-demo
          configMap:
            name: grafana-dashboard-genai-demo
        - name: grafana-dashboard-infrastructure
          configMap:
            name: grafana-dashboard-infrastructure
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: monitoring
  labels:
    app: grafana
spec:
  selector:
    app: grafana
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: grafana-ingress
  namespace: monitoring
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/certificate-arn: ${CERTIFICATE_ARN}
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
spec:
  rules:
    - host: grafana.kimkao.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: grafana-service
                port:
                  number: 3000